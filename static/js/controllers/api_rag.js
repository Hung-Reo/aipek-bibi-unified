// /static/js/controllers/api_rag.js
// Module x·ª≠ l√Ω RAG API cho BiBi

class RAGService {
    constructor(options = {}) {
        // S·ª≠ d·ª•ng proxy API qua server.js thay v√¨ k·∫øt n·ªëi tr·ª±c ti·∫øp ƒë·∫øn Streamlit
        this.apiUrl = options.apiUrl || "/api/rag";
        this.namespace = options.namespace || "bibi_sgk";
        this.defaultTopK = options.topK || 3;
        this.isEnabled = options.enabled !== false; // M·∫∑c ƒë·ªãnh b·∫≠t RAG
        this.debug = options.debug || false;
        
        // Th√™m tr·∫°ng th√°i k·∫øt n·ªëi
        this.connectionStatus = "unknown"; // "connected", "disconnected", "unknown"
        this.checkConnection();
    }
    
    /**
     * Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn RAG API
     * @returns {Promise<boolean>} - Tr·∫°ng th√°i k·∫øt n·ªëi
     */
    async checkConnection() {
        try {
            if (this.debug) {
                console.log('üîÑ ƒêang ki·ªÉm tra k·∫øt n·ªëi RAG API...');
            }
            
            const response = await fetch('/api/status/fastapi');
            const data = await response.json();
            
            this.connectionStatus = data.status === 'ok' ? "connected" : "disconnected";
            
            if (this.debug) {
                console.log(`üîÑ Tr·∫°ng th√°i k·∫øt n·ªëi RAG: ${this.connectionStatus}`, data);
            }
            
            return this.connectionStatus === "connected";
        } catch (error) {
            console.error('L·ªói ki·ªÉm tra k·∫øt n·ªëi RAG:', error);
            this.connectionStatus = "disconnected";
            return false;
        }
    }

    /**
     * T√¨m ki·∫øm t√†i li·ªáu li√™n quan t·ª´ API RAG
     * @param {string} query - C√¢u truy v·∫•n
     * @param {object} options - C√°c t√πy ch·ªçn b·ªï sung
     * @returns {Promise<object>} - K·∫øt qu·∫£ t√¨m ki·∫øm
     */
    async search(query, options = {}) {
        if (!this.isEnabled) {
            return { success: false, disabled: true, results: [] };
        }
    
        try {
            const namespace = options.namespace || this.namespace;
            const topK = options.topK || this.defaultTopK;
            const searchAll = options.searchAll || true; // M·∫∑c ƒë·ªãnh t√¨m ki·∫øm trong t·∫•t c·∫£ namespace
            
            // S·ª≠ d·ª•ng query parameters thay v√¨ body
            const url = new URL(this.apiUrl);
            url.searchParams.append("query", query);
            url.searchParams.append("namespace", namespace);
            url.searchParams.append("top_k", topK);
            url.searchParams.append("search_all", searchAll.toString());
            
            // Th√™m timestamp ƒë·ªÉ tr√°nh cache
            url.searchParams.append("_t", Date.now());
            
            if (this.debug) {
                console.log('üîç RAG Search:', { query, namespace, topK, url: url.toString() });
            }
            
            const response = await fetch(url.toString());
            const data = await response.json();
            
            if (data.status === 'error') {
                console.error('RAG API Error:', data.message);
                return { success: false, error: data.message, results: [] };
            }
            
            if (this.debug) {
                console.log('‚úÖ RAG Results:', data);
            }
            
            return {
                success: true,
                results: data.results || [],
                query: data.query,
                namespace: data.namespace
            };
        } catch (error) {
            console.error('Error connecting to RAG API:', error);
            return {
                success: false,
                error: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn RAG API: ' + error.message,
                results: []
            };
        }
    }

    /**
     * TƒÉng c∆∞·ªùng prompt v·ªõi th√¥ng tin t·ª´ RAG
     * @param {string} originalPrompt - Prompt ban ƒë·∫ßu
     * @param {object} ragResults - K·∫øt qu·∫£ t·ª´ search RAG
     * @returns {string} - Prompt ƒë√£ ƒë∆∞·ª£c tƒÉng c∆∞·ªùng
     */
    enhancePrompt(originalPrompt, ragResults) {
        if (!ragResults || !ragResults.success || !ragResults.results || ragResults.results.length === 0) {
            return originalPrompt;
        }

        // T·∫°o ph·∫ßn context t·ª´ k·∫øt qu·∫£ RAG
        const context = ragResults.results
            .map(doc => {
                const source = doc.metadata && doc.metadata.source ? `[Ngu·ªìn: ${doc.metadata.source}]` : '';
                return `${doc.content} ${source}`.trim();
            })
            .join('\n\n');

        // TƒÉng c∆∞·ªùng prompt v·ªõi context
        return `S·ª≠ d·ª•ng c√°c th√¥ng tin sau ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi:\n\n${context}\n\n${originalPrompt}`;
    }
}

// Kh·ªüi t·∫°o v√† xu·∫•t instance m·∫∑c ƒë·ªãnh
const ragService = new RAGService({
    debug: true // B·∫≠t debug mode trong qu√° tr√¨nh ph√°t tri·ªÉn
});

// Export ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c module kh√°c
window.ragService = ragService;