// /static/js/controllers/lesson-plan/modules/loading-manager.js
// Refactor from file ch√≠nh lesson-plan-ui.js (14-May)

export class LoadingManager {
    constructor(loadingIndicator) {
        this.loadingIndicator = loadingIndicator;
        this.isLoading = false;
        this.startLoadingTime = 0;
        this.progressStage = 0;
        this.progressStartTime = 0;
        this.progressInterval = null;
    }

    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c showLoading t·ª´ d√≤ng 510-603
    showLoading(lessonType, outputArea) {
        this.isLoading = true;
        this.startLoadingTime = Date.now();
        
        if (this.loadingIndicator) {
            this.loadingIndicator.style.display = 'flex';
        }
        
        // Ch·ªçn template placeholder d·ª±a tr√™n lo·∫°i gi√°o √°n
        let placeholderTemplate;
        
        // Hi·ªÉn th·ªã giai ƒëo·∫°n t√¨m ki·∫øm
        placeholderTemplate = `
            <div class="lesson-plan-card">
                <div class="loading-placeholder placeholder-title"></div>
                
                <h3>üéØ ƒêang t·∫°o gi√°o √°n cho b·∫°n...</h3>
                <p style="color: #666; font-size: 14px; margin: 5px 0 15px 0;">
                    <i class="fas fa-clock"></i> D·ª± ki·∫øn: 1-2 ph√∫t | N·ªôi dung s·∫Ω hi·ªÉn th·ªã t·ª´ng ph·∫ßn
                </p>
                
                <div class="loading-status">
                    <div class="status-progress">
                        <div class="progress-bar">
                            <div class="progress-indicator"></div>
                        </div>
                    </div>
                    <div class="status-steps">
                        <div class="status-step active" id="step-searching">
                            <i class="fas fa-search"></i> ƒêang t√¨m ki·∫øm t√†i li·ªáu
                        </div>
                        <div class="status-step" id="step-generating">
                            <i class="fas fa-pen"></i> ƒêang so·∫°n n·ªôi dung
                        </div>
                        <div class="status-step" id="step-formatting">
                            <i class="fas fa-list"></i> ƒêang ƒë·ªãnh d·∫°ng gi√°o √°n
                        </div>
                    </div>
                </div>
                
                <div class="loading-placeholder placeholder-paragraph" style="width: 95%"></div>
                <div class="loading-placeholder placeholder-paragraph" style="width: 88%"></div>
                
                <h4 style="margin-top: 20px;">M·ª•c ti√™u b√†i h·ªçc</h4>
                <div class="loading-placeholder placeholder-paragraph" style="width: 90%"></div>
                <div class="loading-placeholder placeholder-paragraph" style="width: 75%"></div>
                
                <h4 style="margin-top: 20px;">C√°c ho·∫°t ƒë·ªông</h4>
                <div class="placeholder-list">
                    <div class="loading-placeholder placeholder-list-item" style="width: 85%"></div>
                    <div class="loading-placeholder placeholder-list-item" style="width: 90%"></div>
                    <div class="loading-placeholder placeholder-list-item" style="width: 80%"></div>
                </div>
                
                <div class="rag-status-container">
                    <div id="rag-badge" class="rag-badge rag-searching">
                        <span class="rag-badge-icon"><i class="fas fa-database"></i></span>
                    </div>
                    <div class="rag-status-message" id="rag-status-message">
                        <i class="fas fa-spinner fa-spin"></i> ƒêang t√¨m ki·∫øm t·ª´ Ch∆∞∆°ng tr√¨nh gi√°o d·ª•c<span class="typing-dots">...</span>
                    </div>
                    <div id="rag-status-text" class="rag-status-text"></div>
                    <ul id="rag-sources-list" class="rag-sources-list" style="display: none;"></ul>
                </div>
            </div>
        `;
        
        // Hi·ªÉn th·ªã placeholder
        if (outputArea) {
            outputArea.innerHTML = placeholderTemplate;
            
            // B·∫Øt ƒë·∫ßu animation cho progress bar
            this.startProgressAnimation();
        }
    }
    
    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c startProgressAnimation t·ª´ d√≤ng 604-658
    startProgressAnimation() {
        const progressIndicator = document.querySelector('.progress-indicator');
        if (!progressIndicator) return;
        
        // Thi·∫øt l·∫≠p ban ƒë·∫ßu
        progressIndicator.style.width = '0%';
        progressIndicator.style.backgroundColor = '#4CAF50'; // M√†u xanh l√°
        
        // Kh·ªüi t·∫°o bi·∫øn ƒë·ªÉ theo d√µi giai ƒëo·∫°n
        this.progressStage = 0;
        this.progressStartTime = Date.now();
        
        // X√≥a interval c≈© n·∫øu c√≥
        if (this.progressInterval) {
            clearInterval(this.progressInterval);
        }
        
        // Kh·ªüi t·∫°o animation theo giai ƒëo·∫°n
        setTimeout(() => {
            // Giai ƒëo·∫°n 1: 0% -> 30% nhanh (5s) - M√†u xanh l√°
            progressIndicator.style.transition = 'width 5s ease-out, background-color 1s';
            progressIndicator.style.width = '30%';
            
            // Thi·∫øt l·∫≠p interval ƒë·ªÉ c·∫≠p nh·∫≠t t·ª´ng giai ƒëo·∫°n
            this.progressInterval = setInterval(() => {
                const elapsedTime = Date.now() - this.progressStartTime;
                
                // Giai ƒëo·∫°n 2: 30% -> 60% (10s) - V·∫´n m√†u xanh l√°
                if (elapsedTime > 5000 && this.progressStage < 1) {
                    this.progressStage = 1;
                    progressIndicator.style.transition = 'width 10s ease, background-color 1s';
                    progressIndicator.style.width = '60%';
                }
                // Giai ƒëo·∫°n 3: 60% -> 75% (10s) - Chuy·ªÉn sang m√†u xanh d∆∞∆°ng
                else if (elapsedTime > 15000 && this.progressStage < 2) {
                    this.progressStage = 2;
                    progressIndicator.style.backgroundColor = '#2196F3'; // M√†u xanh d∆∞∆°ng
                    progressIndicator.style.transition = 'width 10s linear, background-color 1s';
                    progressIndicator.style.width = '75%';
                }
                // Giai ƒëo·∫°n 4: 75% -> 85% (10s) - Chuy·ªÉn sang m√†u cam
                else if (elapsedTime > 25000 && this.progressStage < 3) {
                    this.progressStage = 3;
                    progressIndicator.style.backgroundColor = '#FF9800'; // M√†u cam
                    progressIndicator.style.transition = 'width 15s linear, background-color 1s';
                    progressIndicator.style.width = '85%';
                }
                // Giai ƒëo·∫°n 5: 85% -> 90% (15s) - Gi·ªØ m√†u cam
                else if (elapsedTime > 35000 && this.progressStage < 4) {
                    this.progressStage = 4;
                    progressIndicator.style.transition = 'width 15s linear';
                    progressIndicator.style.width = '90%';
                }
                
                // C·∫≠p nh·∫≠t c√°c step indicators
                this.updateProgressSteps(this.progressStage);
                
            }, 1000); // Ki·ªÉm tra m·ªói gi√¢y
        }, 200);
    }

    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c updateProgressSteps t·ª´ d√≤ng 659-709
    updateProgressSteps(stage) {
        // T√¨m c√°c ph·∫ßn t·ª≠ b∆∞·ªõc
        const searchingStep = document.getElementById('step-searching');
        const generatingStep = document.getElementById('step-generating');
        const formattingStep = document.getElementById('step-formatting');
        
        if (!searchingStep || !generatingStep || !formattingStep) return;
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i active d·ª±a v√†o stage
        
        // Giai ƒëo·∫°n 0-1: ƒêang t√¨m ki·∫øm
        if (stage < 2) {
            searchingStep.classList.add('active');
            searchingStep.classList.remove('completed');
            generatingStep.classList.remove('active', 'completed');
            formattingStep.classList.remove('active', 'completed');
            
            // C·∫≠p nh·∫≠t n·ªôi dung chi ti·∫øt h∆°n
            const timeElapsed = Math.floor((Date.now() - this.progressStartTime) / 1000);
            searchingStep.innerHTML = `<i class="fas fa-search"></i> ƒêang t√¨m ki·∫øm t√†i li·ªáu (${timeElapsed}s)`;
        }
        // Giai ƒëo·∫°n 2-3: ƒêang so·∫°n n·ªôi dung
        else if (stage < 4) {
            searchingStep.classList.remove('active');
            searchingStep.classList.add('completed');
            searchingStep.innerHTML = `<i class="fas fa-check"></i> ƒê√£ t√¨m th·∫•y t√†i li·ªáu`;
            
            generatingStep.classList.add('active');
            generatingStep.classList.remove('completed');
            formattingStep.classList.remove('active', 'completed');
            
            // Th·ªùi gian c√≤n l·∫°i ∆∞·ªõc t√≠nh
            const timeElapsed = Math.floor((Date.now() - this.progressStartTime) / 1000);
            const estimatedTotal = 45; // Gi·∫£ ƒë·ªãnh t·ªïng th·ªùi gian kho·∫£ng 45 gi√¢y
            const remaining = Math.max(0, estimatedTotal - timeElapsed);
            
            generatingStep.innerHTML = `<i class="fas fa-pen"></i> ƒêang so·∫°n n·ªôi dung (c√≤n ~${remaining}s)`;
        }
        // Giai ƒëo·∫°n 4+: ƒêang ƒë·ªãnh d·∫°ng
        else {
            searchingStep.classList.remove('active');
            searchingStep.classList.add('completed');
            searchingStep.innerHTML = `<i class="fas fa-check"></i> ƒê√£ t√¨m th·∫•y t√†i li·ªáu`;
            
            generatingStep.classList.remove('active');
            generatingStep.classList.add('completed');
            generatingStep.innerHTML = `<i class="fas fa-check"></i> ƒê√£ so·∫°n n·ªôi dung`;
            
            formattingStep.classList.add('active');
            formattingStep.innerHTML = `<i class="fas fa-list"></i> ƒêang ho√†n thi·ªán gi√°o √°n...`;
        }
    }
  
    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c hideLoading t·ª´ d√≤ng 711-721
    hideLoading() {
        this.isLoading = false;
        const loadingTime = (Date.now() - this.startLoadingTime) / 1000;
        console.log(`‚è±Ô∏è Th·ªùi gian ph·∫£n h·ªìi: ${loadingTime.toFixed(2)}s`);
        
        if (this.loadingIndicator) {
            this.loadingIndicator.style.display = 'none';
        }
        
        // X√≥a interval n·∫øu c√≥
        if (this.progressInterval) {
            clearInterval(this.progressInterval);
            this.progressInterval = null;
        }
    }
    
    // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn tr√¨nh th·ªß c√¥ng
    updateProgress(percentage, stage) {
        const progressIndicator = document.querySelector('.progress-indicator');
        if (!progressIndicator) return;
        
        // C·∫≠p nh·∫≠t ƒë·ªô r·ªông c·ªßa thanh ti·∫øn tr√¨nh
        progressIndicator.style.transition = 'width 1s ease-out';
        progressIndicator.style.width = `${percentage}%`;
        
        // C·∫≠p nh·∫≠t giai ƒëo·∫°n
        if (stage !== undefined && stage !== this.progressStage) {
            this.progressStage = stage;
            this.updateProgressSteps(stage);
        }
    }
    
    // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ reset ti·∫øn tr√¨nh
    resetProgress() {
        const progressIndicator = document.querySelector('.progress-indicator');
        if (!progressIndicator) return;
        
        // Reset ƒë·ªô r·ªông v√† m√†u
        progressIndicator.style.transition = 'none';
        progressIndicator.style.width = '0%';
        progressIndicator.style.backgroundColor = '#4CAF50';
        
        // Reset giai ƒëo·∫°n
        this.progressStage = 0;
        this.progressStartTime = Date.now();
        
        // C·∫≠p nh·∫≠t c√°c b∆∞·ªõc
        this.updateProgressSteps(0);
    }
}