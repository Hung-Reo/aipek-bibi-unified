// /static/js/controllers/lesson-plan/modules/content-formatter.js
// Refactor from file ch√≠nh lesson-plan-ui.js (14-May)

export class ContentFormatter {
    constructor(uiMode = 'modern') {
        this.uiMode = uiMode;
    }

    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c formatContent t·ª´ d√≤ng 817-847
    formatContent(content, options = {}) {
        if (!content) return '';
    
        // Tr√°nh x·ª≠ l√Ω l·∫∑p l·∫°i n·∫øu ƒë√£ ƒë·ªãnh d·∫°ng
        if (content.includes('<div class="lesson-content">')) {
            return content;
        }
    
        let formatted = content
            .trim()

            // Headings theo markdown (d·∫°ng li·ªÅn nhau ho·∫∑c c√≥ c√°ch)
            .replace(/^###\s*(.*?)$/gm, '<h3 class="section-heading">$1</h3>')
            .replace(/^##\s*(.*?)$/gm, '<h2 class="section-heading">$1</h2>')
            .replace(/^#\s*(.*?)$/gm, '<h1 class="section-heading">$1</h1>')

            // ‚úÖ X√≥a d√≤ng ch·ªâ ch·ª©a d·∫•u # / ## / ###
            .replace(/^\s*#{1,3}\s*$/gm, '')

            // List th∆∞·ªùng - gi·∫£m kho·∫£ng c√°ch
            .replace(/^\s*[-*]\s+(.*?)$/gm, '<li class="item" style="margin-bottom:2px;line-height:1.4">$1</li>')
            .replace(/^\s*(\d+)\.\s+(.*?)$/gm, '<li class="numbered-item" style="margin-bottom:2px;line-height:1.4">$2</li>')
            .replace(/(<li.*?<\/li>(\n|$))+/g, '<ul class="item-list" style="margin:4px 0;padding-left:1.2em">$&</ul>')
    
            // Inline bold, italic
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
    
            // Chuy·ªÉn line tr·ªëng th√†nh ƒëo·∫°n - gi·∫£m margin
            .replace(/\n{2,}/g, '</p><p class="paragraph" style="margin-bottom:4px;line-height:1.4">')
            // Ch·ªâ ch√®n <br> khi kh√¥ng n·∫±m trong <li> hay ti√™u ƒë·ªÅ
            .replace(/([^\n>])\n(?!\n)/g, '$1<br>')

        // üåü Th√™m ‚Äì t·ª± ƒë·ªông ch√®n div sinh ƒë·ªông
        formatted = formatted

        // üéØ Ch√®n vocab-block: khi g·∫∑p "Vocabulary Item: ..." v√† <ul>
        .replace(/(Vocabulary Item:.*?)<ul>/gi, '<div class="vocab-block"><strong>$1</strong><ul>')
        .replace(/<\/ul>(?!<\/div>)/g, '</ul></div>') // ƒë·∫£m b·∫£o c√≥ </div> sau ul n·∫øu thi·∫øu

        // üß† Grammar ho·∫∑c Analysis
        .replace(/(Grammar|Analysis|Language Analysis):/gi, '<div class="analysis-block"><strong>$1:</strong>')
        .replace(/(Explanation|Structure|Usage):/gi, '<br><strong>$1:</strong>')
        .replace(/(Example:.*?)<br>/gi, '<div class="example-block">$1<br>')
        .replace(/(Game|Activity):/gi, '<div class="activity-block"><strong>$1:</strong>')

        // T·ª± ƒë√≥ng div n·∫øu kh√¥ng c√≥
        .replace(/<\/div>\s*<\/div>/g, '</div>') // g·ªôp div th·ª´a
        .replace(/(<\/(ul|p)>)(\s*<br>)*\s*(?=<h[1-3]|<div|$)/g, '$1</div>'); // ƒë√≥ng block tr∆∞·ªõc khi sang ph·∫ßn m·ªõi

        // B·ªçc trong content ch√≠nh v√† th√™m inline style ƒë·ªÉ gi·∫£m kho·∫£ng c√°ch
        formatted = `<div class="lesson-content"><p class="paragraph" style="margin-bottom:4px;line-height:1.4">${formatted}</p></div>`;
    
        return formatted;
    }

    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c enhanceLessonPlanFormat t·ª´ d√≤ng 848-929
    enhanceLessonPlanFormat(htmlContent) {
        // N·∫øu kh√¥ng c√≥ n·ªôi dung, tr·∫£ v·ªÅ nguy√™n b·∫£n
        if (!htmlContent) return htmlContent;
        
        // N·∫øu ƒë√£ c√≥ ƒë·ªãnh d·∫°ng n√¢ng cao, kh√¥ng x·ª≠ l√Ω l·∫°i
        if (htmlContent.includes('lesson-objective-section')) {
            return htmlContent;
        }
        
        try {
            // T·∫°o container t·∫°m th·ªùi ƒë·ªÉ x·ª≠ l√Ω DOM
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = htmlContent;
            
            // 1. Nh·∫≠n di·ªán v√† ƒë·ªãnh d·∫°ng ph·∫ßn m·ª•c ti√™u (Objectives)
            this.formatSection(tempDiv, /objectives|m·ª•c\s+ti√™u/i, 'lesson-objective-section', 'target');
            
            // 2. Nh·∫≠n di·ªán v√† ƒë·ªãnh d·∫°ng ph·∫ßn t√†i li·ªáu (Materials)
            this.formatSection(tempDiv, /materials|t√†i\s+li·ªáu/i, 'lesson-materials-section', 'book');
            
            // 3. Nh·∫≠n di·ªán v√† ƒë·ªãnh d·∫°ng ph·∫ßn Board Plan
            this.formatSection(tempDiv, /board\s+plan|b·∫£ng|b·∫£n\s+ph√°c\s+th·∫£o/i, 'lesson-board-section', 'chalkboard');
            
            // 4. Nh·∫≠n di·ªán v√† ƒë·ªãnh d·∫°ng ph·∫ßn Anticipated difficulties
            this.formatSection(tempDiv, /anticipated\s+difficulties|kh√≥\s+khƒÉn/i, 'lesson-difficulties-section', 'exclamation-triangle');
            
            // 5. Nh·∫≠n di·ªán v√† ƒë·ªãnh d·∫°ng ph·∫ßn Procedure/Stage
            this.formatProcedureSection(tempDiv);
            
            // 6. Nh·∫≠n di·ªán v√† ƒë·ªãnh d·∫°ng ph·∫ßn ƒë√°nh gi√° (Assessment)
            this.formatSection(tempDiv, /assessment|evaluation|ƒë√°nh\s+gi√°/i, 'lesson-assessment-section', 'clipboard-check');
            
            // 7. Nh·∫≠n di·ªán v√† ƒë·ªãnh d·∫°ng ph·∫ßn l√†m th√™m/b√†i t·∫≠p v·ªÅ nh√† (Homework)
            this.formatSection(tempDiv, /homework|b√†i\s+t·∫≠p\s+v·ªÅ\s+nh√†/i, 'lesson-homework-section', 'home');
            
            // X·ª≠ l√Ω b·ªè c√°c th·∫ª tr√πng l·∫∑p
            const lessonContents = tempDiv.querySelectorAll('.lesson-content');
            if (lessonContents.length > 1) {
                for (let i = 1; i < lessonContents.length; i++) {
                    // Di chuy·ªÉn t·∫•t c·∫£ n·ªôi dung b√™n trong l√™n th·∫ª ƒë·∫ßu ti√™n
                    if (lessonContents[i].innerHTML.trim()) {
                        lessonContents[0].innerHTML += lessonContents[i].innerHTML;
                    }
                    // X√≥a th·∫ª tr√πng l·∫∑p
                    lessonContents[i].remove();
                }
            }
            
            // Tr·∫£ v·ªÅ HTML ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán
            return tempDiv.innerHTML;
        } catch (error) {
            console.warn('L·ªói khi ƒë·ªãnh d·∫°ng n√¢ng cao gi√°o √°n:', error);
            // Tr·∫£ v·ªÅ n·ªôi dung g·ªëc n·∫øu c√≥ l·ªói
            return htmlContent;
        }
    }

    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c formatSection t·ª´ d√≤ng 930-963
    formatSection(container, regex, className, iconName) {
        // T√¨m t·∫•t c·∫£ headings
        const headings = container.querySelectorAll('.section-heading');
        
        // Duy·ªát qua t·ª´ng heading
        headings.forEach(heading => {
            // Ki·ªÉm tra n·∫øu heading kh·ªõp v·ªõi regex
            if (regex.test(heading.textContent)) {
                // T√¨m ph·∫ßn t·ª≠ cha n·∫øu l√† h2 ho·∫∑c h3, n·∫øu l√† h1 th√¨ l·∫•y to√†n b·ªô container
                const section = heading.tagName === 'H1' 
                    ? container 
                    : this.getFollowingSection(heading);
                
                if (!section) return;
                
                // ƒê√°nh d·∫•u ph·∫ßn n√†y b·∫±ng class
                section.classList.add(className);
                
                // T·∫°o box ƒë·∫∑c bi·ªát
                const boxWrapper = document.createElement('div');
                boxWrapper.className = 'lesson-section-box';
                
                // Th√™m icon n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
                if (iconName) {
                    heading.innerHTML = `<i class="fas fa-${iconName}"></i> ${heading.innerHTML}`;
                }
                
                // Di chuy·ªÉn heading v√† n·ªôi dung v√†o box
                section.parentNode.insertBefore(boxWrapper, section);
                boxWrapper.appendChild(section);
            }
        });
    }

    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c formatProcedureSection t·ª´ d√≤ng 964-988
    formatProcedureSection(container) {
        const headings = container.querySelectorAll('.section-heading');
        
        // Duy·ªát qua t·ª´ng heading
        headings.forEach(heading => {
            // Ki·ªÉm tra n·∫øu heading kh·ªõp v·ªõi "Procedure" ho·∫∑c "Stage"
            if (/procedure|stage|quy\s+tr√¨nh|c√°c\s+b∆∞·ªõc/i.test(heading.textContent)) {
                // L·∫•y ph·∫ßn t·ª≠ ti·∫øp theo
                const section = this.getFollowingSection(heading);
                if (!section) return;
                
                // ƒê√°nh d·∫•u ph·∫ßn n√†y
                section.classList.add('lesson-procedure-section');
                
                // Th√™m icon
                heading.innerHTML = `<i class="fas fa-tasks"></i> ${heading.innerHTML}`;
                
                // Ph√°t hi·ªán v√† ƒë·ªãnh d·∫°ng b·∫£ng 2 c·ªôt
                this.formatTwoColumnTable(section);
            }
        });
    }

    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c formatTwoColumnTable t·ª´ d√≤ng 989-1041
    formatTwoColumnTable(section) {
        // T√¨m b·∫£ng 2 c·ªôt ti·ªÅm nƒÉng
        const items = section.querySelectorAll('.item, .numbered-item');
        const itemsArray = Array.from(items);
        
        // Ki·ªÉm tra xem c√≥ pattern c·ªôt 1: Stage, c·ªôt 2: Activity
        for (let i = 0; i < itemsArray.length - 1; i++) {
            if (/warm-up|lead-in|practice|presentation|production|consolidation/i.test(itemsArray[i].textContent) &&
                !(/warm-up|lead-in|practice|presentation|production|consolidation/i.test(itemsArray[i+1].textContent))) {
                
                // T·∫°o b·∫£ng m·ªõi
                const table = document.createElement('table');
                table.className = 'lesson-procedure-table';
                table.style.borderCollapse = 'collapse';
                table.style.marginTop = '8px';
                table.style.marginBottom = '8px';
                
                // T·∫°o header
                const thead = document.createElement('thead');
                thead.innerHTML = `
                    <tr>
                        <th style="padding:6px 10px;">Stage</th>
                        <th style="padding:6px 10px;">Procedure</th>
                    </tr>
                `;
                table.appendChild(thead);
                
                // T·∫°o body
                const tbody = document.createElement('tbody');
                
                // T·∫°o h√†ng cho b·∫£ng t·ª´ c√°c items
                for (let j = i; j < itemsArray.length; j += 2) {
                    if (j + 1 < itemsArray.length) {
                        const tr = document.createElement('tr');
                        tr.innerHTML = `
                            <td class="stage-column" style="padding:6px 10px;">${itemsArray[j].innerHTML}</td>
                            <td class="procedure-column" style="padding:6px 10px;">${itemsArray[j+1].innerHTML}</td>
                        `;
                        tbody.appendChild(tr);
                    }
                }
                
                table.appendChild(tbody);
                
                // Thay th·∫ø c√°c items b·∫±ng b·∫£ng
                const parent = itemsArray[i].parentNode;
                parent.parentNode.insertBefore(table, parent);
                
                // X√≥a c√°c items ƒë√£ ƒë∆∞·ª£c thay th·∫ø
                for (let j = i; j < itemsArray.length; j++) {
                    if (itemsArray[j].parentNode === parent) {
                        parent.removeChild(itemsArray[j]);
                    }
                }
                
                // X√≥a container r·ªóng n·∫øu c·∫ßn
                if (parent.children.length === 0) {
                    parent.parentNode.removeChild(parent);
                }
                
                break;
            }
        }
    }

    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c getFollowingSection t·ª´ d√≤ng 1042-1063
    getFollowingSection(heading) {
        // Kh·ªüi t·∫°o v·ªõi ph·∫ßn t·ª≠ ti·∫øp theo
        let current = heading.nextElementSibling;
        const section = document.createElement('div');
        section.className = 'lesson-section-content';
        
        // ƒê∆∞a heading v√†o ph·∫ßn m·ªõi
        section.appendChild(heading.cloneNode(true));
        heading.parentNode.replaceChild(section, heading);
        
        // Th√™m t·∫•t c·∫£ ph·∫ßn t·ª≠ ti·∫øp theo cho ƒë·∫øn khi g·∫∑p heading kh√°c
        while (current && !current.matches('.section-heading, h1, h2, h3')) {
            const next = current.nextElementSibling;
            section.appendChild(current);
            current = next;
        }
        
        return section;
    }

    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c createCollapsibleSections t·ª´ d√≤ng 1357-1441
    createCollapsibleSections(content) {
        if (!content) return '<div class="lesson-content-empty">Kh√¥ng c√≥ n·ªôi dung</div>';
        
        // N·∫øu n·ªôi dung ƒë√£ c√≥ c·∫•u tr√∫c section, kh√¥ng x·ª≠ l√Ω l·∫°i
        if (content.includes('<div class="section">')) {
            return content;
        }
        
        // Ki·ªÉm tra xem n·ªôi dung ƒë√£ c√≥ c·∫•u tr√∫c HTML ch∆∞a
        const hasHtmlStructure = /<\/?[a-z][\s\S]*>/i.test(content);
        if (!hasHtmlStructure) {
            // N·∫øu ch·ªâ l√† vƒÉn b·∫£n thu·∫ßn t√∫y, b·ªçc trong th·∫ª p
            content = `<p>${content}</p>`;
        }
        
        // T√¨m t·∫•t c·∫£ c√°c heading
        const headingRegex = /<h([123])[^>]*>(.*?)<\/h\1>/g;
        const matches = [...content.matchAll(headingRegex)];
        
        // N·∫æU KH√îNG C√ì HEADING: Tr·∫£ v·ªÅ n·ªôi dung trong m·ªôt container ƒë∆°n gi·∫£n
        if (matches.length === 0) {
            return `
                <div class="lesson-content-simple">
                    ${content}
                </div>
            `;
        }
        
        // C√ì HEADING: X·ª≠ l√Ω c√°c ph·∫ßn theo heading
        let sections = [];
        let lastIndex = 0;
        
        // X·ª≠ l√Ω n·ªôi dung tr∆∞·ªõc heading ƒë·∫ßu ti√™n (n·∫øu c√≥)
        if (matches[0].index > 0) {
            const introContent = content.substring(0, matches[0].index);
            if (introContent.trim()) {
                sections.push({
                    headingText: "Gi·ªõi thi·ªáu",
                    level: 2,
                    content: introContent,
                    isIntro: true
                });
            }
        }
        
        // X·ª≠ l√Ω c√°c ph·∫ßn heading
        for (let i = 0; i < matches.length; i++) {
            const current = matches[i];
            const nextIndex = i < matches.length - 1 ? matches[i + 1].index : content.length;
            
            const headingText = current[2];
            const level = parseInt(current[1]);
            const headingEndIndex = current.index + current[0].length;
            const sectionContent = content.substring(headingEndIndex, nextIndex);
            
            sections.push({
                headingText,
                level,
                content: sectionContent,
                isIntro: false
            });
            
            lastIndex = nextIndex;
        }
        
        // X·ª≠ l√Ω n·ªôi dung sau heading cu·ªëi c√πng (n·∫øu c√≥)
        if (lastIndex < content.length) {
            const outroContent = content.substring(lastIndex);
            if (outroContent.trim()) {
                sections.push({
                    headingText: "N·ªôi dung b·ªï sung",
                    level: 2,
                    content: outroContent,
                    isOutro: true
                });
            }
        }
        
        // T·∫°o HTML k·∫øt qu·∫£ - Kh√¥ng s·ª≠ d·ª•ng c√°c l·ªõp l·ªìng nhau kh√¥ng c·∫ßn thi·∫øt
        let result = '<div class="lesson-content">';
        
        sections.forEach((section, index) => {
            const isFirst = index === 0;
            // QUAN TR·ªåNG: Lu√¥n m·ªü r·ªông section ƒë·∫ßu ti√™n
            const expandedClass = isFirst ? 'expanded' : '';
            const iconClass = isFirst ? 'fa-chevron-up' : 'fa-chevron-down';
            const displayStyle = isFirst ? 'display: block;' : 'display: none;';
            const levelClass = `section-level-${section.level}`;
            
            result += `
                <div class="section ${levelClass}">
                    <div class="section-header" data-index="${index}">
                        <h${section.level} class="section-title">${section.headingText}</h${section.level}>
                        <i class="fas ${iconClass} toggle-icon"></i>
                    </div>
                    <div class="section-body ${expandedClass}" style="${displayStyle}">
                        ${section.content}
                    </div>
                </div>
            `;
        });
        
        result += '</div>';
        
        return result;
    }

    // Th√™m ph∆∞∆°ng th·ª©c m·ªõi v√†o class ContentFormatter
    formatSupplementaryContent(content, formData) {
        if (!content) return '';
        
        // N·∫øu ƒë√£ ƒë·ªãnh d·∫°ng, kh√¥ng x·ª≠ l√Ω l·∫°i
        if (content.includes('<div class="supp-content">')) {
            return content;
        }
        
        // ƒê·ªãnh d·∫°ng c∆° b·∫£n gi·ªëng nh∆∞ formatContent
        let formatted = this.formatContent(content);
        
        // Th√™m x·ª≠ l√Ω ƒë·∫∑c bi·ªát cho n·ªôi dung TT
        try {
            // T·∫°o container t·∫°m th·ªùi ƒë·ªÉ x·ª≠ l√Ω DOM
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = formatted;
            
            // X·ª≠ l√Ω c√°c ph·∫ßn b√†i t·∫≠p d·ª±a v√†o lo·∫°i TT
            const skillType = formData?.suppType || 'vocabulary';
            
            // Th√™m class ƒë·ªÉ √°p d·ª•ng CSS ƒë·∫∑c bi·ªát cho t·ª´ng lo·∫°i
            tempDiv.querySelector('.lesson-content')?.classList.add(`supp-${skillType}`);
            
            // ƒê·ªãnh d·∫°ng c√°c lo·∫°i b√†i t·∫≠p ph·ªï bi·∫øn
            this.formatExercises(tempDiv, skillType);
            
            // Th√™m header th√¥ng tin TT
            const header = document.createElement('div');
            header.className = 'supp-header';
            header.innerHTML = `
                <h1 class="supp-title">Ti·∫øt TƒÉng c∆∞·ªùng ${formData.ttNumber || ''}</h1>
                <div class="supp-info">
                    <p><strong>Unit ${formData.unitNumber || ''}</strong>: ${formData.unitTitle || ''}</p>
                    <p><strong>Lo·∫°i k·ªπ nƒÉng:</strong> ${this.getSkillTypeDisplay(skillType)}</p>
                    <p><strong>Ch·ªß ƒë·ªÅ:</strong> ${formData.topicText || ''}</p>
                </div>
            `;
            
            // Th√™m header v√†o ƒë·∫ßu n·ªôi dung
            if (tempDiv.firstChild) {
                tempDiv.insertBefore(header, tempDiv.firstChild);
            } else {
                tempDiv.appendChild(header);
            }
            
            return `<div class="supp-content">${tempDiv.innerHTML}</div>`;
        } catch (error) {
            console.warn('L·ªói khi ƒë·ªãnh d·∫°ng ti·∫øt tƒÉng c∆∞·ªùng:', error);
            return formatted;
        }
    }

    // H√†m b·ªï tr·ª£ ƒë·ªÉ ƒë·ªãnh d·∫°ng c√°c b√†i t·∫≠p
    formatExercises(container, skillType) {
        // T√¨m t·∫•t c·∫£ headings ch·ª©a t·ª´ kh√≥a b√†i t·∫≠p
        const exerciseHeadings = Array.from(container.querySelectorAll('.section-heading'))
            .filter(heading => /exercise|b√†i t·∫≠p|activity/i.test(heading.textContent));
        
        exerciseHeadings.forEach((heading, index) => {
            const section = this.getFollowingSection(heading);
            if (!section) return;
            
            // Th√™m class cho section b√†i t·∫≠p
            section.classList.add('exercise-section');
            section.classList.add(`exercise-${index + 1}`);
            
            // Th√™m icon t∆∞∆°ng ·ª©ng
            heading.innerHTML = `<i class="fas fa-tasks"></i> ${heading.innerHTML}`;
            
            // ƒê√°nh s·ªë b√†i t·∫≠p
            heading.dataset.exerciseNumber = index + 1;
            
            // X·ª≠ l√Ω ƒë·∫∑c bi·ªát theo lo·∫°i b√†i t·∫≠p
            if (/matching|n·ªëi/i.test(heading.textContent)) {
                this.formatMatchingExercise(section);
            } else if (/fill|ƒëi·ªÅn/i.test(heading.textContent)) {
                this.formatFillInBlanksExercise(section);
            } else if (/choice|tr·∫Øc nghi·ªám/i.test(heading.textContent)) {
                this.formatMultipleChoiceExercise(section);
            }
            // C√°c ƒë·ªãnh d·∫°ng kh√°c t√πy theo lo·∫°i b√†i t·∫≠p
        });
    }

    // H√†m ƒë·ªãnh d·∫°ng b√†i t·∫≠p n·ªëi
    formatMatchingExercise(section) {
        // T√¨m c√°c item trong danh s√°ch
        const items = section.querySelectorAll('.item, .numbered-item');
        if (items.length < 4) return; // C·∫ßn √≠t nh·∫•t 2 c·∫∑p ƒë·ªÉ n·ªëi
        
        // T·∫°o b·∫£ng 2 c·ªôt cho b√†i t·∫≠p n·ªëi
        const table = document.createElement('table');
        table.className = 'matching-exercise';
        
        // Chia items th√†nh 2 c·ªôt
        const leftCol = document.createElement('tbody');
        const rightCol = document.createElement('tbody');
        
        // Chia c√°c items v√†o 2 c·ªôt
        const midpoint = Math.ceil(items.length / 2);
        
        for (let i = 0; i < midpoint; i++) {
            if (items[i]) {
                const tr = document.createElement('tr');
                tr.innerHTML = `<td class="match-item match-left">${items[i].innerHTML}</td>`;
                leftCol.appendChild(tr);
            }
        }
        
        for (let i = midpoint; i < items.length; i++) {
            if (items[i]) {
                const tr = document.createElement('tr');
                tr.innerHTML = `<td class="match-item match-right">${items[i].innerHTML}</td>`;
                rightCol.appendChild(tr);
            }
        }
        
        // Th√™m c·ªôt v√†o b·∫£ng
        const row = document.createElement('tr');
        const leftCell = document.createElement('td');
        const rightCell = document.createElement('td');
        
        leftCell.appendChild(leftCol);
        rightCell.appendChild(rightCol);
        
        row.appendChild(leftCell);
        row.appendChild(rightCell);
        
        table.appendChild(row);
        
        // Thay th·∫ø danh s√°ch g·ªëc b·∫±ng b·∫£ng n·ªëi
        const parent = items[0].parentNode;
        parent.parentNode.insertBefore(table, parent);
        parent.remove();
    }

    // Helper function ƒë·ªÉ x·ª≠ l√Ω b√†i t·∫≠p ƒëi·ªÅn v√†o ch·ªó tr·ªëng
    formatFillInBlanksExercise(section) {
        // X·ª≠ l√Ω t∆∞∆°ng t·ª± v·ªõi b√†i t·∫≠p ƒëi·ªÅn v√†o ch·ªó tr·ªëng
        // ...
    }

    // Helper function ƒë·ªÉ hi·ªÉn th·ªã t√™n lo·∫°i k·ªπ nƒÉng
    getSkillTypeDisplay(skillType) {
        const skillTypeMap = {
            'vocabulary': 'T·ª´ v·ª±ng (Vocabulary)',
            'grammar': 'Ng·ªØ ph√°p (Grammar)',
            'pronunciation': 'Ph√°t √¢m (Pronunciation)',
            'reading': 'ƒê·ªçc hi·ªÉu (Reading)',
            'listening': 'Nghe (Listening)',
            'speaking': 'N√≥i (Speaking)',
            'writing': 'Vi·∫øt (Writing)'
        };
        
        return skillTypeMap[skillType] || skillType;
    }
}