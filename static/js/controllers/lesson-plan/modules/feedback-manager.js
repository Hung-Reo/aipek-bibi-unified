// /static/js/controllers/lesson-plan/modules/feedback-manager.js
// Refactor from file ch√≠nh lesson-plan-ui.js (14-May)

export class FeedbackManager {
    constructor() {
        // Kh·ªüi t·∫°o tr·∫°ng th√°i
        this.setupCompleted = false;
        this.retryAttempts = 0;
    }

    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c addFeedbackForm t·ª´ d√≤ng 2084-2180
    addFeedbackForm(contentElement, topic, tabType) {
        if (!contentElement) {
            console.warn('Kh√¥ng t√¨m th·∫•y contentElement khi th√™m form ph·∫£n h·ªìi');
            return;
        }
        
        // X√ìA T·∫§T C·∫¢ form feedback c≈© ƒë·ªÉ tr√°nh tr√πng l·∫∑p
        const existingFeedbacks = contentElement.querySelectorAll('.feedback-section, .feedback-container, .teacher-feedback');
        if (existingFeedbacks.length > 0) {
            existingFeedbacks.forEach(form => form.remove());
        }
        
        // T·∫°o container cho feedback - S·ª¨ D·ª§NG KI·ªÇU D√ÅNG GI·ªêNG GRAMMAR
        const feedbackSection = document.createElement('div');
        feedbackSection.className = 'feedback-section';
        feedbackSection.style.marginTop = '30px';
        feedbackSection.style.backgroundColor = '#f9f9f9';
        feedbackSection.style.borderRadius = '8px';
        feedbackSection.style.padding = '15px 20px';
        feedbackSection.style.border = '1px solid #eee';
        
        // T·∫°o HTML cho form gi·ªëng h·ªát grammar - ƒê·∫¢M B·∫¢O STARS V√Ä TEXTAREA ƒê√öNG ƒê·ªäNH D·∫†NG
        feedbackSection.innerHTML = `
            <div class="feedback-header">
                <h4>üìù Ph·∫£n h·ªìi c·ªßa gi√°o vi√™n</h4>
                <p class="feedback-subtitle">ƒê√°nh gi√° n·ªôi dung ƒë·ªÉ gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán</p>
            </div>
            
            <div class="feedback-rating">
                <p>M·ª©c ƒë·ªô h·ªØu √≠ch:</p>
                <div class="star-rating">
                    <span class="star" data-rating="1">‚òÖ</span>
                    <span class="star" data-rating="2">‚òÖ</span>
                    <span class="star" data-rating="3">‚òÖ</span>
                    <span class="star" data-rating="4">‚òÖ</span>
                    <span class="star" data-rating="5">‚òÖ</span>
                </div>
                <span class="rating-text">Ch∆∞a ƒë√°nh gi√°</span>
            </div>
            
            <div class="feedback-comment">
                <textarea placeholder="√ù ki·∫øn c·ªßa b·∫°n v·ªÅ n·ªôi dung n√†y..." rows="3" style="width: 100%; resize: none; padding: 10px; border: 1px solid #ddd; border-radius: 4px;"></textarea>
            </div>
            
            <div class="feedback-actions">
                <button class="feedback-submit-btn" style="background-color: #4CAF50; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; font-weight: 500; margin-top: 10px;">G·ª≠i ph·∫£n h·ªìi</button>
            </div>
        `;
        
        // Th√™m v√†o container ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
        contentElement.appendChild(feedbackSection);
        
        // Th√™m CSS cho sao ƒë√°nh gi√° - ƒê·∫¢M B·∫¢O M√ÄU S·∫ÆC ƒê√öNG
        const stars = feedbackSection.querySelectorAll('.star');
        stars.forEach(star => {
            star.style.color = '#ccc';
            star.style.cursor = 'pointer';
            star.style.fontSize = '24px';
            star.style.transition = 'color 0.2s ease';
            star.style.display = 'inline-block';
            star.style.margin = '0 3px';
        });
        
        // Th√™m s·ª± ki·ªán cho sao ƒë√°nh gi√°
        let selectedRating = 0;
        const ratingText = feedbackSection.querySelector('.rating-text');
        
        stars.forEach(star => {
            star.addEventListener('mouseover', () => {
                const rating = parseInt(star.getAttribute('data-rating'));
                
                stars.forEach((s, index) => {
                    if (index < rating) {
                        s.style.color = '#FFD700';
                    } else {
                        s.style.color = '#ccc';
                    }
                });
            });
            
            star.addEventListener('mouseout', () => {
                stars.forEach((s, index) => {
                    if (index < selectedRating) {
                        s.style.color = '#FFD700';
                    } else {
                        s.style.color = '#ccc';
                    }
                });
            });
            
            star.addEventListener('click', () => {
                selectedRating = parseInt(star.getAttribute('data-rating'));
                
                stars.forEach((s, index) => {
                    if (index < selectedRating) {
                        s.style.color = '#FFD700';
                    } else {
                        s.style.color = '#ccc';
                    }
                });
                
                // C·∫≠p nh·∫≠t text
                const ratingTexts = [
                    'Ch∆∞a ƒë√°nh gi√°',
                    'Kh√¥ng h·ªØu √≠ch',
                    'H∆°i h·ªØu √≠ch',
                    'Kh√° h·ªØu √≠ch',
                    'H·ªØu √≠ch',
                    'R·∫•t h·ªØu √≠ch'
                ];
                ratingText.textContent = ratingTexts[selectedRating];
            });
        });
        
        // Th√™m s·ª± ki·ªán cho n√∫t g·ª≠i
        const submitBtn = feedbackSection.querySelector('.feedback-submit-btn');
        const textarea = feedbackSection.querySelector('textarea');
        
        submitBtn.addEventListener('click', () => {
            if (selectedRating === 0) {
                alert('Vui l√≤ng ch·ªçn m·ª©c ƒë·ªô ƒë√°nh gi√°');
                return;
            }
            
            const comment = textarea.value.trim();
            
            // S·ª≠ d·ª•ng feedbackManager ƒë·ªÉ l∆∞u nh∆∞ng gi·ªØ UI t·ª± t·∫°o
            if (window.feedbackManager) {
                try {
                    window.feedbackManager.init(topic, tabType);
                    window.feedbackManager.saveFeedback(selectedRating, comment);
                    
                    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                    const thankYouMessage = document.createElement('div');
                    thankYouMessage.className = 'feedback-thank-you';
                    thankYouMessage.innerHTML = `
                        <p style="color: #4CAF50; font-weight: 500;"><i class="fas fa-check-circle"></i> C·∫£m ∆°n ph·∫£n h·ªìi c·ªßa b·∫°n!</p>
                    `;
                    
                    // Thay th·∫ø form b·∫±ng th√¥ng b√°o
                    feedbackSection.innerHTML = '';
                    feedbackSection.appendChild(thankYouMessage);
                    
                    // T·ª± ƒë·ªông ·∫©n sau 3 gi√¢y
                    setTimeout(() => {
                        feedbackSection.style.display = 'none';
                    }, 3000);
                    
                } catch (error) {
                    console.error('L·ªói khi g·ª≠i ph·∫£n h·ªìi:', error);
                    alert('C√≥ l·ªói x·∫£y ra khi g·ª≠i ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.');
                }
            } else {
                console.warn('FeedbackManager kh√¥ng t·ªìn t·∫°i');
                alert('Kh√¥ng th·ªÉ g·ª≠i ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.');
            }
        });
    }

    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c handleFeedbackSubmit t·ª´ d√≤ng 2182-2251
    handleFeedbackSubmit(submitBtn, statusElement, textarea, topic, tabType, rating, comment) {
        // Ki·ªÉm tra xem c√≥ ƒë·ªß d·ªØ li·ªáu kh√¥ng
        if (!rating || rating < 1) {
            statusElement.style.display = 'block';
            statusElement.style.color = '#f44336';
            statusElement.innerHTML = '<i class="fas fa-exclamation-circle"></i> Vui l√≤ng ƒë√°nh gi√° s·ªë sao';
            setTimeout(() => {
                statusElement.style.display = 'none';
            }, 3000);
            return;
        }
        
        console.log(`G·ª≠i ph·∫£n h·ªìi: ${rating} sao, ch·ªß ƒë·ªÅ: ${topic}, lo·∫°i: ${tabType}, n·ªôi dung: ${comment}`);
        
        // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang g·ª≠i...';
        submitBtn.disabled = true;
        
        // Chu·∫©n b·ªã d·ªØ li·ªáu feedback theo ƒë·ªãnh d·∫°ng chung
        const feedbackData = {
            id: `lesson_feedback_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,
            type: 'lesson_plan',
            subtype: tabType || 'main',
            topic: topic || 'Gi√°o √°n',
            rating: parseInt(rating),
            comment: comment || '',
            timestamp: new Date().toISOString(),
            language: document.documentElement.lang || 'vi'
        };
        
        // THAY ƒê·ªîI: Ch·ªâ s·ª≠ d·ª•ng FeedbackManager ƒë·ªÉ l∆∞u d·ªØ li·ªáu
        if (window.feedbackManager && window.feedbackManager.saveFeedback) {
            try {
                // S·ª≠ d·ª•ng FeedbackManager ƒë·ªÉ l∆∞u feedback
                window.feedbackManager.saveFeedback(rating, comment);
                console.log('‚úÖ ƒê√£ g·ª≠i qua FeedbackManager');
                
                // Ph√°t s·ª± ki·ªán ƒë·ªÉ th√¥ng b√°o cho c√°c module kh√°c
                const feedbackEvent = new CustomEvent('feedbackSubmitted', { 
                    detail: feedbackData 
                });
                document.dispatchEvent(feedbackEvent);
                
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                statusElement.style.display = 'block';
                statusElement.style.color = '#4CAF50';
                statusElement.innerHTML = '<i class="fas fa-check-circle"></i> Ph·∫£n h·ªìi c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!';
                
                // V√¥ hi·ªáu h√≥a form sau khi g·ª≠i
                textarea.disabled = true;
                textarea.style.backgroundColor = '#f5f5f5';
                
                // C·∫≠p nh·∫≠t n√∫t
                submitBtn.innerHTML = '<i class="fas fa-check"></i> ƒê√£ g·ª≠i';
                submitBtn.style.backgroundColor = '#888';
                
                // L∆∞u tr·∫°ng th√°i ƒë√£ g·ª≠i
                const feedbackSection = submitBtn.closest('.feedback-section');
                if (feedbackSection) {
                    feedbackSection.dataset.submitted = 'true';
                }
            } catch (error) {
                console.error('L·ªói khi g·ª≠i ph·∫£n h·ªìi:', error);
                
                // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
                statusElement.style.display = 'block';
                statusElement.style.color = '#f44336';
                statusElement.innerHTML = '<i class="fas fa-exclamation-circle"></i> C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau';
                
                // Kh√¥i ph·ª•c n√∫t
                submitBtn.innerHTML = 'G·ª≠i ph·∫£n h·ªìi';
                submitBtn.disabled = false;
            }
        } else {
            console.error('FeedbackManager kh√¥ng kh·∫£ d·ª•ng');
            
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            statusElement.style.display = 'block';
            statusElement.style.color = '#f44336';
            statusElement.innerHTML = '<i class="fas fa-exclamation-circle"></i> Kh√¥ng th·ªÉ g·ª≠i ph·∫£n h·ªìi, vui l√≤ng th·ª≠ l·∫°i sau';
            
            // Kh√¥i ph·ª•c n√∫t
            submitBtn.innerHTML = 'G·ª≠i ph·∫£n h·ªìi';
            submitBtn.disabled = false;
        }
    }

    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c setupRatingStars t·ª´ d√≤ng 2253-2265
    setupRatingStars() {
        try {
            console.log('ƒêang thi·∫øt l·∫≠p sao ƒë√°nh gi√°...');
            
            // T√¨m ho·∫∑c t·∫°o container sao ƒë√°nh gi√°
            let starContainers = [];
            
            // T√¨m ki·∫øm v·ªõi selector ƒë√∫ng - C·∫¢ feedback-stars V√Ä star-rating
            const possibleSelectors = ['.feedback-stars', '.star-rating', '.feedback-rating .star-rating'];
            
            // Th·ª≠ t·ª´ng selector
            for (const selector of possibleSelectors) {
                const containers = document.querySelectorAll(selector);
                if (containers.length > 0) {
                    console.log(`T√¨m th·∫•y ${containers.length} container sao v·ªõi selector ${selector}`);
                    containers.forEach(container => starContainers.push(container));
                }
            }
            
            // N·∫øu kh√¥ng t√¨m th·∫•y, t√¨m trong c√°c tab output
            if (starContainers.length === 0) {
                const outputAreas = [
                    document.getElementById('main-output'),
                    document.getElementById('supplementary-output')
                ];
                
                outputAreas.forEach(area => {
                    if (area) {
                        // T√¨m trong t·∫•t c·∫£ c√°c feedback section
                        const feedbackSections = area.querySelectorAll('.feedback-section');
                        
                        feedbackSections.forEach(section => {
                            const starRating = section.querySelector('.star-rating');
                            if (starRating) {
                                console.log(`T√¨m th·∫•y star-rating trong feedback-section`);
                                starContainers.push(starRating);
                            }
                        });
                    }
                });
            }
            
            // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, t·∫°o m·ªõi container
            if (starContainers.length === 0) {
                console.log('Kh√¥ng t√¨m th·∫•y container sao, ƒëang t·∫°o m·ªõi...');
                
                // T√¨m c√°c feedback section ƒë√£ t·ªìn t·∫°i nh∆∞ng kh√¥ng c√≥ star-rating
                const feedbackSections = document.querySelectorAll('.feedback-section');
                
                if (feedbackSections.length > 0) {
                    // T·∫°o v√† th√™m star-rating v√†o feedback section
                    feedbackSections.forEach(section => {
                        if (!section.querySelector('.star-rating')) {
                            const starRatingDiv = document.createElement('div');
                            starRatingDiv.className = 'star-rating';
                            starRatingDiv.innerHTML = `
                                <span class="star" data-rating="1">‚òÖ</span>
                                <span class="star" data-rating="2">‚òÖ</span>
                                <span class="star" data-rating="3">‚òÖ</span>
                                <span class="star" data-rating="4">‚òÖ</span>
                                <span class="star" data-rating="5">‚òÖ</span>
                            `;
                            
                            // T√¨m v·ªã tr√≠ th√≠ch h·ª£p ƒë·ªÉ ch√®n
                            const feedbackHeader = section.querySelector('.feedback-header');
                            if (feedbackHeader) {
                                section.insertBefore(starRatingDiv, feedbackHeader.nextSibling);
                            } else {
                                section.appendChild(starRatingDiv);
                            }
                            
                            console.log('ƒê√£ t·∫°o th√†nh c√¥ng container sao m·ªõi');
                            starContainers.push(starRatingDiv);
                        }
                    });
                } else {
                    // Kh√¥ng t√¨m th·∫•y feedback section, t√¨m tab output hi·ªán t·∫°i ƒë·ªÉ th√™m v√†o
                    const currentOutput = document.querySelector('.tab-content.active');
                    
                    if (currentOutput) {
                        // T·∫°o to√†n b·ªô feedback section m·ªõi
                        const newFeedbackSection = document.createElement('div');
                        newFeedbackSection.className = 'feedback-section';
                        newFeedbackSection.innerHTML = `
                            <div class="feedback-header">
                                <h4>üìù Ph·∫£n h·ªìi c·ªßa gi√°o vi√™n</h4>
                                <p class="feedback-subtitle">ƒê√°nh gi√° n·ªôi dung ƒë·ªÉ gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán</p>
                            </div>
                            
                            <div class="feedback-rating">
                                <p>M·ª©c ƒë·ªô h·ªØu √≠ch:</p>
                                <div class="star-rating">
                                    <span class="star" data-rating="1">‚òÖ</span>
                                    <span class="star" data-rating="2">‚òÖ</span>
                                    <span class="star" data-rating="3">‚òÖ</span>
                                    <span class="star" data-rating="4">‚òÖ</span>
                                    <span class="star" data-rating="5">‚òÖ</span>
                                </div>
                                <span class="rating-text">Ch∆∞a ƒë√°nh gi√°</span>
                            </div>
                            
                            <div class="feedback-comment">
                                <textarea placeholder="√ù ki·∫øn c·ªßa b·∫°n v·ªÅ n·ªôi dung n√†y..." rows="3"></textarea>
                            </div>
                            
                            <div class="feedback-actions">
                                <button class="feedback-submit-btn">G·ª≠i ph·∫£n h·ªìi</button>
                            </div>
                        `;
                        
                        // Th√™m v√†o output hi·ªán t·∫°i
                        currentOutput.appendChild(newFeedbackSection);
                        
                        // L·∫•y container sao t·ª´ section m·ªõi
                        const starRating = newFeedbackSection.querySelector('.star-rating');
                        if (starRating) {
                            console.log('ƒê√£ t·∫°o th√†nh c√¥ng container sao m·ªõi trong section m·ªõi');
                            starContainers.push(starRating);
                        }
                    } else {
                        console.warn('Kh√¥ng t√¨m th·∫•y tab output hi·ªán t·∫°i ƒë·ªÉ th√™m feedback');
                        this.retryRatingSetup(2); // Th·ª≠ l·∫°i 2 l·∫ßn
                        return;
                    }
                }
            }
            
            if (starContainers.length === 0) {
                console.warn('Kh√¥ng th·ªÉ t√¨m ho·∫∑c t·∫°o container sao');
                this.retryRatingSetup(2); // Th·ª≠ l·∫°i 2 l·∫ßn
                return;
            }
            
            console.log(`X·ª≠ l√Ω ${starContainers.length} container sao`);
            this.processStarContainers(starContainers);
            this.setupCompleted = true;
        } catch (error) {
            console.error('L·ªói khi thi·∫øt l·∫≠p sao ƒë√°nh gi√°:', error);
            // Kh√¥ng retry trong tr∆∞·ªùng h·ª£p l·ªói ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ t·∫≠n
        }
    }
    
    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c retryRatingSetup t·ª´ d√≤ng 2267-2289 
    retryRatingSetup(maxRetries = 3) {
        this.retryCount = this.retryCount || 0;
        if (this.retryCount < maxRetries) {
            this.retryCount++;
            console.log(`Th·ª≠ l·∫°i l·∫ßn ${this.retryCount}...`);
            setTimeout(() => {
                this.setupRatingStars();
            }, 1000);
        } else {
            console.log(`ƒê√£ h·∫øt s·ªë l·∫ßn th·ª≠ thi·∫øt l·∫≠p sao ƒë√°nh gi√°`);
            this.retryCount = 0; // Reset ƒë·ªÉ l·∫ßn sau c√≥ th·ªÉ th·ª≠ l·∫°i
        }
    }
    
    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c processStarContainers t·ª´ d√≤ng 2291-2354
    processStarContainers(containers) {
        containers.forEach(container => {
            const stars = container.querySelectorAll('.star');
            
            if (stars.length === 0) {
                console.warn('Kh√¥ng t√¨m th·∫•y sao trong container!');
                return;
            }
            
            console.log(`Container c√≥ ${stars.length} sao`);
            
            // X√≥a t·∫•t c·∫£ c√°c l·ªõp v√† s·ª± ki·ªán c≈©
            stars.forEach(star => {
                star.classList.remove('selected');
                
                // Thi·∫øt l·∫≠p style tr·ª±c ti·∫øp - ƒê·∫¢M B·∫¢O M·∫†NH H∆†N
                star.style.color = 'transparent';
                star.style.webkitTextStroke = '1px #aaa';
                star.style.cursor = 'pointer';
                star.style.fontSize = '24px';
                star.style.transition = 'all 0.2s ease';
                star.style.display = 'inline-block';
                star.style.margin = '0 3px';
                
                // Clone v√† thay th·∫ø ƒë·ªÉ x√≥a t·∫•t c·∫£ event listeners c≈©
                const newStar = star.cloneNode(true);
                star.parentNode.replaceChild(newStar, star);
            });
            
            // L·∫•y l·∫°i danh s√°ch stars sau khi clone
            const refreshedStars = container.querySelectorAll('.star');
            
            // Th√™m s·ª± ki·ªán m·ªõi
            refreshedStars.forEach((star, index) => {
                // Hover effect
                star.addEventListener('mouseenter', () => {
                    for (let i = 0; i <= index; i++) {
                        refreshedStars[i].style.color = '#FFD700';
                        refreshedStars[i].style.webkitTextStroke = '1px #e0b000';
                        refreshedStars[i].style.textShadow = '0 0 5px rgba(255, 215, 0, 0.5)';
                    }
                });
                
                star.addEventListener('mouseleave', () => {
                    refreshedStars.forEach((s, i) => {
                        if (!s.classList.contains('selected')) {
                            s.style.color = 'transparent';
                            s.style.webkitTextStroke = '1px #aaa';
                            s.style.textShadow = 'none';
                        }
                    });
                });
                
                // Click event
                star.addEventListener('click', () => {
                    refreshedStars.forEach(s => {
                        s.classList.remove('selected');
                        s.style.color = 'transparent';
                        s.style.webkitTextStroke = '1px #aaa';
                        s.style.textShadow = 'none';
                    });
                    
                    for (let i = 0; i <= index; i++) {
                        refreshedStars[i].classList.add('selected');
                        refreshedStars[i].style.color = '#FFD700';
                        refreshedStars[i].style.webkitTextStroke = '1px #e0b000';
                        refreshedStars[i].style.textShadow = '0 0 5px rgba(255, 215, 0, 0.5)';
                    }
                    
                    // L∆∞u gi√° tr·ªã ƒë√°nh gi√°
                    container.dataset.rating = index + 1;
                });
            });
        });
    }

    // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ ki·ªÉm tra xem setup ƒë√£ ho√†n th√†nh ch∆∞a
    isSetupCompleted() {
        return this.setupCompleted;
    }

    // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ kh·ªüi t·∫°o feedback manager (t∆∞∆°ng th√≠ch v·ªõi window.feedbackManager)
    init(topic, tabType) {
        this.topic = topic || 'Gi√°o √°n';
        this.tabType = tabType || 'main';
        console.log(`FeedbackManager kh·ªüi t·∫°o v·ªõi ch·ªß ƒë·ªÅ: ${this.topic}, lo·∫°i: ${this.tabType}`);
    }

    // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ l∆∞u feedback (t∆∞∆°ng th√≠ch v·ªõi window.feedbackManager)
    saveFeedback(rating, comment) {
        // L∆∞u feedback v√†o localStorage ƒë·ªÉ c√≥ th·ªÉ xem l·∫°i sau
        try {
            const feedbackId = `lesson_feedback_${Date.now()}`;
            const feedbackData = {
                id: feedbackId,
                topic: this.topic,
                tabType: this.tabType,
                rating: parseInt(rating),
                comment: comment || '',
                timestamp: new Date().toISOString()
            };
            
            // L·∫•y danh s√°ch feedback hi·ªán c√≥
            let feedbacks = JSON.parse(localStorage.getItem('bibi_feedbacks') || '[]');
            
            // Th√™m feedback m·ªõi
            feedbacks.push(feedbackData);
            
            // L∆∞u l·∫°i
            localStorage.setItem('bibi_feedbacks', JSON.stringify(feedbacks));
            
            console.log('‚úÖ ƒê√£ l∆∞u ph·∫£n h·ªìi:', feedbackData);
            
            // Ph√°t s·ª± ki·ªán feedback ƒë√£ ƒë∆∞·ª£c l∆∞u
            const feedbackEvent = new CustomEvent('feedbackSaved', { 
                detail: feedbackData 
            });
            document.dispatchEvent(feedbackEvent);
            
            return true;
        } catch (error) {
            console.error('L·ªói khi l∆∞u ph·∫£n h·ªìi:', error);
            throw error;
        }
    }
}