// /static/js/controllers/lesson-plan/modules/rag-status-manager.js
// Refactor from file ch√≠nh lesson-plan-ui.js (14-May)
export class RAGStatusManager {
    constructor() {
        this.namespaceMap = {
            'bibi_sgk': 'S√°ch gi√°o khoa',
            'bibi_ctgd': 'Ch∆∞∆°ng tr√¨nh gi√°o d·ª•c',
            'bibi_lesson_plan': 'M·∫´u gi√°o √°n',
        };
    }

    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c updateRagStatus t·ª´ d√≤ng 722-816
    updateStatus(ragInfo) {
        if (!ragInfo) return;
        
        const ragBadge = document.getElementById('rag-badge');
        const ragStatusText = document.getElementById('rag-status-text');
        const ragSourcesList = document.getElementById('rag-sources-list');
        const progressIndicator = document.querySelector('.progress-indicator');
        
        if (!ragBadge || !ragStatusText) return;
        
        // C·∫≠p nh·∫≠t bi·ªÉu t∆∞·ª£ng RAG
        if (ragInfo.searching) {
            // ƒêang t√¨m ki·∫øm
            const timeElapsed = ragInfo.timeElapsed || Math.floor((Date.now() - ragInfo.startTime) / 1000);
            const currentStage = ragInfo.currentStage || "ƒêang t√¨m ki·∫øm...";
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ti·∫øn tr√¨nh n·∫øu ·ªü giai ƒëo·∫°n t√¨m ki·∫øm
            if (progressIndicator && timeElapsed > 10) {
                // ƒê·∫©y nhanh ti·∫øn tr√¨nh n·∫øu t√¨m ki·∫øm k√©o d√†i
                progressIndicator.style.transition = 'width 3s ease';
                progressIndicator.style.width = '45%';
            }
            
            ragBadge.className = 'rag-badge rag-searching';
            ragBadge.title = `RAG: ƒêang t√¨m ki·∫øm (${timeElapsed}s)`;
            
            // Hi·ªÉn th·ªã tr·∫°ng th√°i t√¨m ki·∫øm chi ti·∫øt v√† sinh ƒë·ªông h∆°n
            let searchingMessage = `ƒêang t√¨m ki·∫øm t√†i li·ªáu t·ª´ ${this.getNamespaceDisplayName(ragInfo.searchingNamespace || 'bibi_ctgd')}...`;
            
            // ƒêi·ªÅu ch·ªânh th√¥ng b√°o d·ª±a tr√™n th·ªùi gian
            if (timeElapsed > 20) {
                searchingMessage = 'ƒêang t√¨m ki·∫øm th√¥ng tin chi ti·∫øt (c√≥ th·ªÉ m·∫•t th√™m th·ªùi gian)...';
            } else if (timeElapsed > 10) {
                searchingMessage = 'ƒêang t√¨m v√† ph√¢n t√≠ch t√†i li·ªáu li√™n quan...';
            }
            
            // Th√™m th√¥ng tin t√¨m th·∫•y n·∫øu c√≥
            if (ragInfo.foundCount) {
                searchingMessage += ` (ƒë√£ t√¨m th·∫•y ${ragInfo.foundCount} k·∫øt qu·∫£)`;
            }
            
            // ∆Ø·ªõc t√≠nh th·ªùi gian c√≤n l·∫°i
            let remainingTime = '';
            if (timeElapsed > 5) {
                const estimatedTotal = Math.min(40, timeElapsed * 1.5); // ∆Ø·ªõc t√≠nh t·ªïng th·ªùi gian
                const remaining = Math.max(0, Math.round(estimatedTotal - timeElapsed));
                if (remaining > 0) {
                    remainingTime = ` - c√≤n kho·∫£ng ${remaining}s`;
                }
            }
            
            ragStatusText.innerHTML = `
                <div class="rag-searching-animation">
                    <span class="dot"></span><span class="dot"></span><span class="dot"></span>
                </div>
                <div class="rag-status-detail">
                    ${searchingMessage}
                    <span class="rag-time">(${timeElapsed}s${remainingTime})</span>
                    ${ragInfo.priorityFound ? '<span class="rag-found">‚úì ƒê√£ t√¨m th·∫•y t·ª´ CTGD</span>' : ''}
                </div>
            `;
            
            // ƒê√°nh d·∫•u n·∫øu ƒë√£ t√¨m th·∫•y m·ªôt s·ªë k·∫øt qu·∫£
            if (ragInfo.partialResults && progressIndicator) {
                progressIndicator.classList.add('priority-found');
            }
            
            ragStatusText.style.display = 'block';
        } else if (ragInfo.usedRAG) {
            // ƒê√£ t√¨m th·∫•y v√† s·ª≠ d·ª•ng RAG
            
            // ƒê·∫©y ti·∫øn tr√¨nh l√™n ~85% khi ƒë√£ c√≥ k·∫øt qu·∫£ RAG
            if (progressIndicator) {
                progressIndicator.style.transition = 'width 1s ease-out, background-color 1s';
                progressIndicator.style.backgroundColor = '#4CAF50'; // Chuy·ªÉn v·ªÅ m√†u xanh l√°
                progressIndicator.style.width = '85%';
            }
            
            ragBadge.className = 'rag-badge rag-found';
            ragBadge.title = `RAG: ƒê√£ s·ª≠ d·ª•ng ${ragInfo.namespaces?.join(', ')}`;
            
            // Hi·ªÉn th·ªã danh s√°ch ngu·ªìn v·ªõi th√¥ng tin phong ph√∫ h∆°n
            if (ragInfo.sources && ragInfo.sources.length > 0) {
                // Hi·ªÉn th·ªã t·ªëi ƒëa 5 ngu·ªìn ƒë·ªÉ kh√¥ng chi·∫øm qu√° nhi·ªÅu kh√¥ng gian
                const displaySources = ragInfo.sources.slice(0, 5);
                const hasMore = ragInfo.sources.length > 5;
                
                ragSourcesList.innerHTML = displaySources.map(source => {
                    // T√°ch ngu·ªìn v√† tr√≠ch ƒëo·∫°n n·∫øu c√≥
                    const parts = source.split(' - ');
                    const sourceName = parts[0];
                    const excerpt = parts.length > 1 ? parts[1] : '';
                    
                    return `
                        <li class="rag-source-item">
                            <span class="rag-source-icon">üìö</span> 
                            <strong>${sourceName}</strong>
                            ${excerpt ? `<span class="source-excerpt">${excerpt}</span>` : ''}
                        </li>
                    `;
                }).join('') + (hasMore ? `<li class="rag-source-more">+ ${ragInfo.sources.length - 5} ngu·ªìn kh√°c</li>` : '');
                
                ragSourcesList.style.display = 'block';
            }
            
            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v·ªõi ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng
            let qualityMessage = '';
            if (ragInfo.sources && ragInfo.sources.length > 3) {
                qualityMessage = '<span class="rag-quality high">Ch·∫•t l∆∞·ª£ng cao</span>';
            } else if (ragInfo.sources && ragInfo.sources.length > 0) {
                qualityMessage = '<span class="rag-quality medium">Ch·∫•t l∆∞·ª£ng kh√°</span>';
            }
            
            ragStatusText.innerHTML = `
                <div class="rag-success">
                    <span class="rag-check">‚úì</span> Gi√°o √°n ƒë∆∞·ª£c t·∫°o d·ª±a tr√™n:
                    ${ragInfo.namespaces?.map(ns => `<span class="rag-namespace">${this.getNamespaceDisplayName(ns)}</span>`).join(', ')}
                    ${qualityMessage}
                </div>
            `;
            ragStatusText.style.display = 'block';
        } else if (ragInfo.error) {
            // C√≥ l·ªói khi t√¨m ki·∫øm
            ragBadge.className = 'rag-badge rag-error';
            ragBadge.title = `RAG: L·ªói - ${ragInfo.error}`;
            
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chi ti·∫øt h∆°n
            ragStatusText.innerHTML = `
                <div class="rag-error-container">
                    <span class="rag-error-text">‚ö†Ô∏è ${ragInfo.error}</span>
                    <div class="rag-error-help">H·ªá th·ªëng s·∫Ω ti·∫øp t·ª•c t·∫°o gi√°o √°n d·ª±a tr√™n AI.</div>
                </div>
            `;
            ragStatusText.style.display = 'block';
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ti·∫øn tr√¨nh n·∫øu c√≥ l·ªói
            if (progressIndicator) {
                progressIndicator.style.backgroundColor = '#F44336'; // M√†u ƒë·ªè
                setTimeout(() => {
                    // Chuy·ªÉn l·∫°i m√†u v√† ti·∫øp t·ª•c ti·∫øn tr√¨nh
                    progressIndicator.style.backgroundColor = '#FF9800'; // M√†u cam
                    progressIndicator.style.width = '70%';
                }, 1000);
            }
        } else if (ragInfo.endTime) {
            // ƒê√£ t√¨m ki·∫øm nh∆∞ng kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£
            ragBadge.className = 'rag-badge rag-no-results';
            ragBadge.title = 'RAG: Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p';
            
            // Hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng t√¨m th·∫•y v·ªõi g·ª£i √Ω
            ragStatusText.innerHTML = `
                <div class="rag-no-results-container">
                    <span class="rag-no-results-text">Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p t·ª´ CTGD</span>
                    <div class="rag-suggestion">Gi√°o √°n s·∫Ω ƒë∆∞·ª£c t·∫°o d·ª±a tr√™n ki·∫øn th·ª©c c·ªßa AI</div>
                </div>
            `;
            ragStatusText.style.display = 'block';
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ti·∫øn tr√¨nh n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
            if (progressIndicator) {
                // ƒê·∫©y ti·∫øn tr√¨nh l√™n ~50% ƒë·ªÉ cho bi·∫øt ƒë√£ k·∫øt th√∫c giai ƒëo·∫°n t√¨m ki·∫øm
                progressIndicator.style.transition = 'width 2s ease-out';
                progressIndicator.style.width = '50%';
            }
        } else {
            // Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh
            ragBadge.className = 'rag-badge rag-inactive';
            ragBadge.title = 'RAG: Kh√¥ng s·ª≠ d·ª•ng';
            ragStatusText.style.display = 'none';
            ragSourcesList.style.display = 'none';
        }
    }

    // Di chuy·ªÉn ph∆∞∆°ng th·ª©c getNamespaceDisplayName t·ª´ d√≤ng 818-828
    getNamespaceDisplayName(namespace) {
        return this.namespaceMap[namespace] || namespace;
    }
    
    // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ t·∫°o badge RAG
    createRAGBadge(type, sources = []) {
        let badgeType = type || 'disabled';
        let tooltipText = '';
        
        switch (badgeType) {
            case 'success':
                tooltipText = 'N·ªôi dung ƒë∆∞·ª£c tr√≠ch t·ª´ s√°ch gi√°o khoa v√† ch∆∞∆°ng tr√¨nh gi√°o d·ª•c th√¥ng qua h·ªá th·ªëng RAG';
                return `<span class="rag-badge rag-success tooltip">üìö RAG<span class="tooltip-text">${tooltipText}</span></span>`;
            
            case 'fallback':
                tooltipText = 'N·ªôi dung ƒë∆∞·ª£c t·∫°o b·ªüi AI do kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong s√°ch gi√°o khoa';
                return `<span class="rag-badge rag-fallback tooltip">ü§ñ AI<span class="tooltip-text">${tooltipText}</span></span>`;
            
            default:
                tooltipText = 'N·ªôi dung ƒë∆∞·ª£c t·∫°o ho√†n to√†n b·ªüi AI';
                return `<span class="rag-badge rag-disabled tooltip">ü§ñ AI<span class="tooltip-text">${tooltipText}</span></span>`;
        }
    }
    
    // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ t·∫°o danh s√°ch ngu·ªìn
    createSourcesList(sources = []) {
        if (!sources || sources.length === 0) return '';
        
        // Lo·∫°i b·ªè c√°c ngu·ªìn tr√πng l·∫∑p
        const uniqueSources = Array.from(new Set(sources.map(source => {
            const parts = source.split(' - ');
            return parts[0];
        })));
        
        return `
            <div class="rag-sources-simple">
                <h4>üîç Ngu·ªìn tham kh·∫£o:</h4>
                <ul class="simple-source-list">
                    ${uniqueSources.map(source => `<li>${source}</li>`).join('')}
                </ul>
            </div>
        `;
    }
}