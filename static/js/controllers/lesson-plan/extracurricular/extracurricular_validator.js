// /static/js/controllers/lesson-plan/extracurricular/extracurricular_validator.js
// Input validation and safety system for extracurricular activities
// REFERENCE: New safety logic for educational context enforcement

/**
 * Content safety and educational adaptation system
 * PURPOSE: Ensure all inputs result in appropriate educational activities
 * APPROACH: Option A - Accept and adapt to educational context
 */

/**
 * Validate and sanitize user input for educational appropriateness
 * REFERENCE: New safety logic inspired by content moderation systems
 */
export function validateContentSafety(topic, additionalRequirements = '') {
  console.log(`üõ°Ô∏è Validating content safety for: ${topic}`);
  
  const result = {
    isAppropriate: true,
    sanitizedTopic: topic,
    adaptedTopic: topic,
    fallbackSuggestion: null,
    warningMessage: null,
    requiresRedirection: false
  };
  
  // Normalize input for analysis
  const normalizedTopic = topic.toLowerCase();
  const normalizedRequirements = additionalRequirements.toLowerCase();
  
  // Define inappropriate content categories
  const inappropriateCategories = {
    violence: ['ƒë√°nh', 'ƒë·∫≠p', 'ƒë√°nh nhau', 'b·∫°o l·ª±c', 'chi·∫øn tranh', 's√∫ng', 'dao', 'gi·∫øt'],
    inappropriate_language: ['t·ª•c tƒ©u', 'ch·ª≠i', 'x·∫•u', 'gh√©t'],
    dangerous_activities: ['nguy hi·ªÉm', 'ch√°y', 'n·ªï', 'ƒë·ªôc h·∫°i'],
    adult_content: ['ng∆∞·ªùi l·ªõn', 'kh√¥ng ph√π h·ª£p'],
    negative_behavior: ['l∆∞·ªùi', 'x·∫•u', 'ti√™u c·ª±c', 'ph√° ho·∫°i']
  };
  
  // Check for inappropriate content
  let foundIssue = null;
  for (const [category, keywords] of Object.entries(inappropriateCategories)) {
    if (keywords.some(keyword => 
        normalizedTopic.includes(keyword) || 
        normalizedRequirements.includes(keyword))) {
      foundIssue = category;
      break;
    }
  }
  
  // Apply educational adaptation if needed
  if (foundIssue) {
    console.log(`‚ö†Ô∏è Found inappropriate content: ${foundIssue}`);
    const adaptation = adaptToEducationalContext(topic, foundIssue);
    
    result.requiresRedirection = true;
    result.adaptedTopic = adaptation.newTopic;
    result.warningMessage = adaptation.warningMessage;
    result.sanitizedTopic = adaptation.newTopic;
    
    console.log(`‚úÖ Adapted to educational context: ${adaptation.newTopic}`);
  }
  
  return result;
}

/**
 * Adapt inappropriate topics to educational equivalents
 * REFERENCE: New educational transformation logic
 */
function adaptToEducationalContext(originalTopic, issueType) {
  const adaptations = {
    violence: {
      newTopic: 'K·ªπ nƒÉng gi·∫£i quy·∫øt xung ƒë·ªôt b·∫±ng giao ti·∫øp',
      warningMessage: 'ƒê√£ chuy·ªÉn ƒë·ªïi th√†nh ho·∫°t ƒë·ªông v·ªÅ k·ªπ nƒÉng giao ti·∫øp t√≠ch c·ª±c v√† gi·∫£i quy·∫øt xung ƒë·ªôt m·ªôt c√°ch h√≤a b√¨nh.'
    },
    inappropriate_language: {
      newTopic: 'K·ªπ nƒÉng giao ti·∫øp l·ªãch s·ª± v√† vƒÉn h√≥a',
      warningMessage: 'ƒê√£ chuy·ªÉn ƒë·ªïi th√†nh ho·∫°t ƒë·ªông r√®n luy·ªán k·ªπ nƒÉng giao ti·∫øp t√≠ch c·ª±c v√† l·ªãch s·ª±.'
    },
    dangerous_activities: {
      newTopic: 'An to√†n v√† ph√≤ng ng·ª´a r·ªßi ro trong sinh ho·∫°t',
      warningMessage: 'ƒê√£ chuy·ªÉn ƒë·ªïi th√†nh ho·∫°t ƒë·ªông gi√°o d·ª•c v·ªÅ an to√†n v√† k·ªπ nƒÉng ph√≤ng ng·ª´a r·ªßi ro.'
    },
    adult_content: {
      newTopic: 'Ph√°t tri·ªÉn k·ªπ nƒÉng s·ªëng v√† tr√°ch nhi·ªám c√° nh√¢n',
      warningMessage: 'ƒê√£ ƒëi·ªÅu ch·ªânh ƒë·ªÉ ph√π h·ª£p v·ªõi ƒë·ªô tu·ªïi h·ªçc sinh THCS.'
    },
    negative_behavior: {
      newTopic: 'X√¢y d·ª±ng th√°i ƒë·ªô t√≠ch c·ª±c v√† ƒë·ªông l·ª±c h·ªçc t·∫≠p',
      warningMessage: 'ƒê√£ chuy·ªÉn h∆∞·ªõng th√†nh ho·∫°t ƒë·ªông x√¢y d·ª±ng tinh th·∫ßn t√≠ch c·ª±c.'
    }
  };
  
  return adaptations[issueType] || {
    newTopic: 'Ho·∫°t ƒë·ªông giao ti·∫øp v√† ph√°t tri·ªÉn k·ªπ nƒÉng s·ªëng',
    warningMessage: 'ƒê√£ ƒëi·ªÅu ch·ªânh ƒë·ªÉ ph√π h·ª£p v·ªõi m√¥i tr∆∞·ªùng gi√°o d·ª•c t√≠ch c·ª±c.'
  };
}

/**
 * Analyze topic type for template selection
 * REFERENCE: Classification logic for template matching
 */
export function analyzeTopicType(topic, additionalRequirements = '') {
  console.log(`üîç Analyzing topic type for: ${topic}`);
  
  const normalizedTopic = topic.toLowerCase();
  const normalizedRequirements = additionalRequirements.toLowerCase();
  const combinedText = `${normalizedTopic} ${normalizedRequirements}`;
  
  const topicCategories = {
    sports: {
      keywords: ['th·ªÉ thao', 'b√≥ng', 'ch·∫°y', 'nh·∫£y', 'b∆°i', 'v√µ', 'gym', 'fitness', 'marathon', 'tennis', 'basketball', 'football', 'volleyball', 'badminton', 'yoga', 'aerobic'],
      confidence: 0
    },
    arts: {
      keywords: ['ngh·ªá thu·∫≠t', 'v·∫Ω', 'h√°t', 'nh·∫£y', 'm√∫a', 'nh·∫°c', 'tranh', 's√°ng t·∫°o', 'thi·∫øt k·∫ø', 'photography', 'video', 'drama', 'theater', 'piano', 'guitar', 'th·ªùi trang'],
      confidence: 0
    },
    culture: {
      keywords: ['vƒÉn h√≥a', 'truy·ªÅn th·ªëng', 'l·ªÖ h·ªôi', '·∫©m th·ª±c', 'n·∫•u', 'l√†m b√°nh', 'phong t·ª•c', 't√¥n gi√°o', 'l·ªãch s·ª≠', 'du l·ªãch', 'qu·ªëc gia', 'm√≥n ƒÉn', 'ƒë·∫∑c s·∫£n'],
      confidence: 0
    },
    science: {
      keywords: ['khoa h·ªçc', 'th√≠ nghi·ªám', 'robot', 'm√°y t√≠nh', 'coding', 'to√°n', 'v·∫≠t l√Ω', 'h√≥a h·ªçc', 'sinh h·ªçc', 'c√¥ng ngh·ªá', 'k·ªπ thu·∫≠t', 'AI', 'l·∫≠p tr√¨nh'],
      confidence: 0
    }
  };
  
  // Calculate confidence scores
  for (const [category, data] of Object.entries(topicCategories)) {
    data.confidence = data.keywords.filter(keyword => 
      combinedText.includes(keyword)
    ).length;
  }
  
  // Find best match
  const bestMatch = Object.entries(topicCategories)
    .sort(([,a], [,b]) => b.confidence - a.confidence)[0];
  
  const selectedType = bestMatch[1].confidence > 0 ? bestMatch[0] : 'general';
  
  console.log(`‚úÖ Topic type selected: ${selectedType} (confidence: ${bestMatch[1].confidence})`);
  
  return {
    type: selectedType,
    confidence: bestMatch[1].confidence,
    suggestedKeywords: topicCategories[selectedType]?.keywords.slice(0, 5) || []
  };
}

/**
 * Smart topic adaptation for non-educational inputs
 * REFERENCE: Educational context transformation (Option A approach)
 */
export function adaptNonEducationalTopic(originalTopic) {
  console.log(`üîÑ Adapting topic to educational context: ${originalTopic}`);
  
  const normalizedTopic = originalTopic.toLowerCase();
  
  // Educational adaptation mappings
  const adaptationMappings = {
    // Food & Cooking
    'n·∫•u ƒÉn': 'H·ªçc t·ª´ v·ª±ng ti·∫øng Anh qua ho·∫°t ƒë·ªông n·∫•u ƒÉn',
    'l√†m b√°nh': 'English Baking Vocabulary v√† Cultural Exchange',
    'm√≥n ƒÉn': 'Gi·ªõi thi·ªáu ·∫©m th·ª±c Vi·ªát Nam b·∫±ng ti·∫øng Anh',
    'ph·ªü': 'H·ªçc ti·∫øng Anh qua m√≥n ƒÉn truy·ªÅn th·ªëng Vi·ªát Nam',
    'b√°nh m√¨': 'Vietnamese Food Culture in English',
    
    // Entertainment  
    'xem phim': 'English Movie Discussion v√† Vocabulary Building',
    'nghe nh·∫°c': 'Learning English through Songs',
    'game': 'Educational English Games v√† Team Building',
    'ch∆°i': 'Interactive English Learning Activities',
    
    // Daily activities
    'ng·ªß': 'Healthy Lifestyle v√† Daily Routine Vocabulary',
    'mua s·∫Øm': 'Shopping English v√† Consumer Awareness',
    'du l·ªãch': 'Travel English v√† Cultural Exploration',
    'l√†m ƒë·∫πp': 'Self-care Vocabulary v√† Confidence Building',
    
    // Technology
    'facebook': 'Digital Citizenship v√† Online Communication Skills',
    'youtube': 'Creating Educational Content in English',
    'tiktok': 'Creative Expression v√† Media Literacy',
    'ƒëi·ªán tho·∫°i': 'Technology Vocabulary v√† Responsible Usage',
    
    // Hobbies
    'ƒë·ªçc truy·ªán': 'English Storytelling v√† Reading Comprehension',
    'ch·ª•p ·∫£nh': 'Photography Vocabulary v√† Visual Communication',
    'l√†m v∆∞·ªùn': 'Gardening English v√† Environmental Awareness'
  };
  
  // Find matching adaptation
  for (const [keyword, adaptation] of Object.entries(adaptationMappings)) {
    if (normalizedTopic.includes(keyword)) {
      console.log(`‚úÖ Matched adaptation: ${keyword} ‚Üí ${adaptation}`);
      return {
        adaptedTopic: adaptation,
        originalTopic: originalTopic,
        adaptationReason: `ƒê√£ chuy·ªÉn ƒë·ªïi "${originalTopic}" th√†nh ho·∫°t ƒë·ªông gi√°o d·ª•c c√≥ √Ω nghƒ©a.`,
        educationalValue: true
      };
    }
  }
  
  // Generic educational adaptation
  const genericAdaptation = `H·ªçc ti·∫øng Anh qua ch·ªß ƒë·ªÅ "${originalTopic}"`;
  console.log(`‚úÖ Applied generic adaptation: ${genericAdaptation}`);
  
  return {
    adaptedTopic: genericAdaptation,
    originalTopic: originalTopic,
    adaptationReason: `ƒê√£ t√≠ch h·ª£p "${originalTopic}" v√†o ho·∫°t ƒë·ªông h·ªçc ti·∫øng Anh.`,
    educationalValue: true
  };
}

/**
 * Validate activity parameters for completeness
 * REFERENCE: Simplified from existing lesson validation patterns
 */
export function validateActivityParams(params) {
  console.log('üîç Validating activity parameters:', params);
  
  const validation = {
    isValid: true,
    errors: [],
    warnings: [],
    sanitizedParams: { ...params }
  };
  
  // Required field validation
  if (!params.topic || params.topic.trim().length < 3) {
    validation.errors.push('Ch·ªß ƒë·ªÅ ho·∫°t ƒë·ªông c·∫ßn √≠t nh·∫•t 3 k√Ω t·ª±');
    validation.isValid = false;
  }
  
  if (!params.grade || !['6', '7', '8', '9'].includes(params.grade)) {
    validation.warnings.push('Kh·ªëi l·ªõp kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh l·ªõp 6');
    validation.sanitizedParams.grade = '6';
  }
  
  if (!params.duration || isNaN(parseInt(params.duration))) {
    validation.warnings.push('Th·ªùi gian kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh 45 ph√∫t');
    validation.sanitizedParams.duration = '45';
  } else {
    const duration = parseInt(params.duration);
    if (duration < 15) {
      validation.warnings.push('Th·ªùi gian qu√° ng·∫Øn, ƒëi·ªÅu ch·ªânh l√™n 15 ph√∫t');
      validation.sanitizedParams.duration = '15';
    } else if (duration > 120) {
      validation.warnings.push('Th·ªùi gian qu√° d√†i, ƒëi·ªÅu ch·ªânh xu·ªëng 120 ph√∫t');
      validation.sanitizedParams.duration = '120';
    }
  }
  
  // Sanitize additional requirements
  if (params.additionalRequirements && params.additionalRequirements.length > 500) {
    validation.warnings.push('Y√™u c·∫ßu ƒë·∫∑c bi·ªát qu√° d√†i, ƒë√£ r√∫t g·ªçn');
    validation.sanitizedParams.additionalRequirements = 
      params.additionalRequirements.substring(0, 500) + '...';
  }
  
  console.log(`‚úÖ Validation result: ${validation.isValid ? 'VALID' : 'INVALID'}`);
  return validation;
}

/**
 * Suggest educational improvements for topics
 * REFERENCE: New utility function for educational enhancement
 */
export function suggestEducationalContext(topic, activityType = 'general') {
  console.log(`üí° Suggesting educational context for: ${topic} (${activityType})`);
  
  const suggestions = {
    sports: [
      'T√≠ch h·ª£p t·ª´ v·ª±ng ti·∫øng Anh v·ªÅ th·ªÉ thao',
      'R√®n luy·ªán k·ªπ nƒÉng teamwork v√† leadership',
      'H·ªçc c√°c c√¢u giao ti·∫øp trong ho·∫°t ƒë·ªông th·ªÉ thao',
      'Ph√°t tri·ªÉn fair play v√† sportsmanship'
    ],
    arts: [
      'H·ªçc t·ª´ v·ª±ng v·ªÅ m√†u s·∫Øc v√† h√¨nh d·∫°ng b·∫±ng ti·∫øng Anh',
      'Ph√°t tri·ªÉn kh·∫£ nƒÉng thuy·∫øt tr√¨nh v·ªÅ t√°c ph·∫©m ngh·ªá thu·∫≠t',
      'T√¨m hi·ªÉu vƒÉn h√≥a ngh·ªá thu·∫≠t c·ªßa c√°c n∆∞·ªõc',
      'R√®n luy·ªán t·ª± tin v√† kh·∫£ nƒÉng bi·ªÉu ƒë·∫°t'
    ],
    culture: [
      'So s√°nh vƒÉn h√≥a Vi·ªát Nam v·ªõi c√°c n∆∞·ªõc kh√°c',
      'H·ªçc t·ª´ v·ª±ng v·ªÅ truy·ªÅn th·ªëng v√† phong t·ª•c',
      'Ph√°t tri·ªÉn k·ªπ nƒÉng giao ti·∫øp ƒëa vƒÉn h√≥a',
      'TƒÉng c∆∞·ªùng hi·ªÉu bi·∫øt v√† tolerance'
    ],
    science: [
      'H·ªçc scientific vocabulary b·∫±ng ti·∫øng Anh',
      'Ph√°t tri·ªÉn critical thinking v√† problem-solving',
      'R√®n luy·ªán observation v√† hypothesis skills',
      '·ª®ng d·ª•ng ki·∫øn th·ª©c v√†o th·ª±c t·∫ø'
    ],
    general: [
      'T√≠ch h·ª£p h·ªçc ti·∫øng Anh v√†o ho·∫°t ƒë·ªông th·ª±c t·∫ø',
      'Ph√°t tri·ªÉn communication v√† social skills',
      'R√®n luy·ªán teamwork v√† collaboration',
      'X√¢y d·ª±ng confidence v√† leadership'
    ]
  };
  
  const contextSuggestions = suggestions[activityType] || suggestions.general;
  
  return {
    suggestedEnhancements: contextSuggestions,
    educationalFocus: `Chuy·ªÉn ƒë·ªïi "${topic}" th√†nh ho·∫°t ƒë·ªông h·ªçc t·∫≠p c√≥ √Ω nghƒ©a`,
    practicalTips: [
      'S·ª≠ d·ª•ng visual aids v√† hands-on activities',
      'Khuy·∫øn kh√≠ch h·ªçc sinh tham gia t√≠ch c·ª±c',
      'T·∫°o m√¥i tr∆∞·ªùng h·ªçc t·∫≠p th√¢n thi·ªán v√† an to√†n',
      'ƒê√°nh gi√° d·ª±a tr√™n s·ª± tham gia v√† effort'
    ]
  };
}

/**
 * Complete validation and adaptation pipeline
 * REFERENCE: Main validation function combining all checks
 */
export function processInputCompletely(rawParams) {
  console.log('üîÑ Processing complete input validation and adaptation');
  
  const result = {
    isValid: false,
    processedParams: {},
    adaptations: {},
    warnings: [],
    errors: []
  };
  
  try {
    // Step 1: Basic parameter validation
    const paramValidation = validateActivityParams(rawParams);
    result.processedParams = paramValidation.sanitizedParams;
    result.warnings.push(...paramValidation.warnings);
    result.errors.push(...paramValidation.errors);
    
    if (!paramValidation.isValid) {
      return result;
    }
    
    // Step 2: Content safety check
    const safetyCheck = validateContentSafety(
      result.processedParams.topic,
      result.processedParams.additionalRequirements
    );
    
    if (safetyCheck.requiresRedirection) {
      result.adaptations.safety = safetyCheck;
      result.warnings.push(safetyCheck.warningMessage);
      result.processedParams.adaptedTopic = safetyCheck.adaptedTopic;
    }
    
    // Step 3: Educational adaptation if needed
    if (!safetyCheck.requiresRedirection) {
      const educationalAdaptation = adaptNonEducationalTopic(result.processedParams.topic);
      if (educationalAdaptation.adaptedTopic !== result.processedParams.topic) {
        result.adaptations.educational = educationalAdaptation;
        result.processedParams.adaptedTopic = educationalAdaptation.adaptedTopic;
        result.warnings.push(educationalAdaptation.adaptationReason);
      }
    }
    
    // Step 4: Topic type analysis
    const topicAnalysis = analyzeTopicType(
      result.processedParams.adaptedTopic || result.processedParams.topic,
      result.processedParams.additionalRequirements
    );
    
    result.processedParams.activityType = topicAnalysis.type;
    result.processedParams.confidence = topicAnalysis.confidence;
    
    // Step 5: Educational suggestions
    const educationalSuggestions = suggestEducationalContext(
      result.processedParams.adaptedTopic || result.processedParams.topic,
      topicAnalysis.type
    );
    
    result.adaptations.suggestions = educationalSuggestions;
    
    result.isValid = true;
    console.log('‚úÖ Complete input processing successful');
    
  } catch (error) {
    console.error('‚ùå Error in input processing:', error);
    result.errors.push('C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω input');
  }
  
  return result;
}