// /static/js/controllers/lesson-plan/lesson-plan-rag.js
// Module kết nối với dịch vụ RAG cho tính năng Soạn giáo án

// ✅ NEW IMPORT: Access to UNITS_DATA for unit name lookup
import { UNITS_DATA } from './lesson-plan-prompts.js';

export class LessonPlanRAG {
    constructor(options = {}) {
        // Xác định base URL cho môi trường phát triển và sản xuất
        const baseUrl = window.location.origin; // Unified deployment

        // Đường dẫn API
        this.apiUrl = options.apiUrl || `${baseUrl}/api/rag`; 
        this.healthUrl = `${baseUrl}/api/health`;
        
        // Danh sách các namespace để tìm kiếm
        this.namespaces = options.namespaces || ["bibi_sgk", "bibi_ctgd", "bibi_lesson_plan"];
        this.defaultNamespace = options.defaultNamespace || "bibi_lesson_plan"; 
        
        this.defaultTopK = options.topK || 5; // Tăng lên 5 để có đủ ngữ cảnh cho giáo án
        this.isAvailable = false; // Mặc định chưa kết nối
        this.debug = options.debug || false;
        this.enabled = options.enabled !== false;
        
        console.log(`🔄 Lesson Plan RAG API URL: ${this.apiUrl}`);
        console.log(`📚 Lesson Plan RAG Namespaces: ${this.namespaces.join(', ')}`);
    }

    // Kiểm tra kết nối đến API
    async checkConnection() {
        if (!this.enabled) {
            console.log('💤 RAG đã bị tắt trong cấu hình');
            return false;
        }
        
        try {
            console.log('🔍 Kiểm tra kết nối RAG cho giáo án...');
            
            // Gọi endpoint health check
            const response = await fetch(this.healthUrl, {
                method: 'GET',
                headers: { 'Accept': 'application/json' },
                signal: AbortSignal.timeout(5000) // 5 giây timeout
            });
            
            if (!response.ok) {
                throw new Error(`Lỗi HTTP: ${response.status}`);
            }
            
            const data = await response.json();
            // Chấp nhận cả 'success' và 'ok' là trạng thái thành công
            this.isAvailable = (data.status === 'success' || data.status === 'ok');
            
            if (this.isAvailable) {
                console.log(`✅ Kết nối RAG giáo án thành công: ${data.message}`);
                
                // Kiểm tra xem có dữ liệu Pinecone không
                if (data.pinecone_index && data.default_namespace) {
                    console.log(`📊 Pinecone index: ${data.pinecone_index}, namespace mặc định: ${data.default_namespace}`);
                } else {
                    // Vẫn được coi là thành công ngay cả khi không có thông tin Pinecone cụ thể
                    console.log(`📊 Kết nối thành công, không có thông tin chi tiết về Pinecone`);
                }
            } else {
                console.error('❌ API RAG không sẵn sàng cho giáo án');
            }
            
            return this.isAvailable;
        }
        catch (error) {
            console.error('❌ Lỗi kiểm tra kết nối RAG giáo án:', error);
            
            // Trong môi trường phát triển, giả lập kết nối thành công
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                console.warn('⚠️ Đang ở môi trường phát triển: Giả lập kết nối RAG thành công mặc dù có lỗi');
                this.isAvailable = true;
                return true;
            }
            
            this.isAvailable = false;
            return false;
        }
    }

    // 🔥 GET TIMEOUT CONFIGURATION - PHASE 2 OPTIMIZED
    getTimeoutConfiguration(lessonType = 'main') {
        // Main timeout configuration - OPTIMIZED for 3-namespace coverage
        const mainTimeouts = {
            'bibi_ctgd': 35000,       // Working fine với 35s
            'bibi_sgk': 30000,        // Working fine với 30s  
            'bibi_lesson_plan': 45000, // ✅ PHASE 2 FIX: 25s → 45s (backend cần >25s)
            'default': 30000
        };
        
        // Supplementary timeout configuration (EXTENDED FOR BETTER SUCCESS)
        const supplementaryTimeouts = {
            'bibi_ctgd': 55000,       // +20s (backend needs 35s + network + safety)
            'bibi_sgk': 50000,        // +20s (backend needs 30s + network + safety)
            'bibi_lesson_plan': 45000, // Consistent với main lesson timeout
            'default': 50000          // +20s default
        };

        // ✅ NEW: Dedicated Review timeout configuration (HIGHEST - covers 3 Units)
        const reviewTimeouts = {
            'bibi_ctgd': 35000,       // Copy từ mainTimeouts  
            'bibi_sgk': 30000,        // Copy từ mainTimeouts
            'bibi_lesson_plan': 45000, // Copy từ mainTimeouts
            'default': 30000          // Copy từ mainTimeouts
        };
        
        // 🎯 CONDITIONAL LOGIC: Only extend timeout for supplementary
        if (lessonType === 'supplementary') {
            console.log('⏱️ Using EXTENDED timeouts for Supplementary lesson');
            return supplementaryTimeouts;
        } else if (lessonType === 'review') {
            // ✅ ENHANCED: Review needs AGGRESSIVE timeouts (cross-unit complexity)
            console.log('⏱️ Using AGGRESSIVE timeouts for Review lesson');
            return reviewTimeouts; // Use dedicated review timeouts
        } else {
            console.log('⏱️ Using OPTIMIZED timeouts for Main lesson');
            return mainTimeouts;
        }
    }

    // Thêm vào class LessonPlanRAG
    async searchFastFirst(query, options = {}) {
        if (!this.enabled) {
        return { success: false, disabled: true, results: [] };
        }
        
        const lessonType = options.lessonType || 'main';
        
        // 1. Xác định namespace ưu tiên dựa trên loại giáo án
        let priorityNamespace;
        switch(lessonType) {
        case 'main':
            priorityNamespace = "bibi_ctgd"; // CTGD cho giáo án chính
            break;
        case 'supplementary':
            priorityNamespace = "bibi_ctgd"; // CTGD cho tăng tiết
            break;
        case 'extracurricular':
            priorityNamespace = "bibi_ctgd"; // CTGD cho ngoại khóa
            break;
        default:
            priorityNamespace = "bibi_ctgd";
        }
        
        console.log(`🚀 Tìm kiếm nhanh trên namespace ưu tiên: ${priorityNamespace}`);
        
        // 2. 🚀 PARALLEL OPTIMIZATION: Reduced timeout for background processing  
        const fastTimeout = options.timeout || options.fastTimeout || 5000; // 🚀 PARALLEL: 10s → 5s for background
        
        try {

        // 3. Tạo URL với query parameters - tối ưu dựa vào loại giáo án
        let url;
        if (this.apiUrl.startsWith('http')) {
            url = new URL(this.apiUrl);
        } else {
            url = new URL(this.apiUrl, window.location.origin);
        }
        url.searchParams.append("query", query);
        url.searchParams.append("namespace", priorityNamespace);

        // Điều chỉnh tham số dựa vào loại giáo án
        if (options.lessonType === 'supplementary') {
            // Cho supplementary - chỉ lấy 1 kết quả tốt nhất và hạ threshold
            url.searchParams.append("top_k", 1);
            url.searchParams.append("threshold", "0.55"); // Ngưỡng thấp hơn
            url.searchParams.append("max_tokens", "4000"); // Giới hạn kích thước token
        } else {
            // Cho main và extracurricular
            url.searchParams.append("top_k", 2); // Giảm từ 3 xuống 2
            url.searchParams.append("threshold", "0.7");
        }

        url.searchParams.append("search_all", "true"); // Thêm tham số search_all
        url.searchParams.append("threshold", "0.6"); // Thêm ngưỡng thấp hơn cho supplementary

        // Thêm tham số max_tokens cho kết quả ngắn hơn, nhanh hơn
        if (options.lessonType === 'supplementary') {
            url.searchParams.append("max_tokens", "8000"); // Giới hạn kích thước token
        }
        
        // 4. Thêm timeout ngắn để không đợi quá lâu
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
            controller.abort();
            console.log(`⏱️ PARALLEL: Timeout sau ${fastTimeout/1000}s cho namespace ưu tiên ${priorityNamespace}`);
        }, fastTimeout);
        
        // 5. Gọi API tìm kiếm
        console.log(`⏱️ PARALLEL: Đợi tối đa ${fastTimeout/1000}s cho kết quả nhanh từ ${priorityNamespace}`);
        const response = await fetch(url.toString(), {
            signal: controller.signal
        });
        clearTimeout(timeoutId);
        
        // 6. Xử lý kết quả
        if (!response.ok) {
            console.warn(`RAG API trả về status code: ${response.status} cho namespace ưu tiên`);
            return { success: false, namespace: priorityNamespace, results: [] };
        }
        
        const data = await response.json();
        
        if (data.status === 'error') {
            console.error(`RAG API Error cho ${priorityNamespace}:`, data.message);
            return { success: false, namespace: priorityNamespace, error: data.message, results: [] };
        }
        
        // 7. Đánh dấu nguồn của mỗi kết quả
        const results = (data.results || []).map(result => ({
            ...result,
            namespace: priorityNamespace,
            metadata: {
            ...result.metadata,
            namespace: priorityNamespace,
            source: result.metadata?.source || this.getNamespaceDisplayName(priorityNamespace)
            }
        }));
        
        // 8. Trả về kết quả
        console.log(`✅ PARALLEL: Tìm thấy ${results.length} kết quả nhanh từ namespace ưu tiên ${priorityNamespace}`);
        return {
            success: results.length > 0,
            namespace: priorityNamespace,
            results,
            count: results.length,
            prioritySearch: true
        };
        } catch (error) {
        if (error.name === 'AbortError') {
            console.warn(`RAG API timeout cho namespace ưu tiên ${priorityNamespace}`);
            return { success: false, namespace: priorityNamespace, error: 'Timeout', results: [] };
        }
        console.error(`Lỗi khi tìm kiếm trên namespace ưu tiên ${priorityNamespace}:`, error);
        return { success: false, namespace: priorityNamespace, error: error.message, results: [] };
        }
    }
