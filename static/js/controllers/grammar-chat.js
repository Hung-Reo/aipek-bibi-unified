/**
 * GrammarChat - Module qu·∫£n l√Ω t√≠nh nƒÉng h·ªèi th√™m cho BiBi Grammar
 * Phi√™n b·∫£n: 1.0.0
 */

// ƒê·∫£m b·∫£o xu·∫•t class ra ngo√†i module
export class GrammarChat {
    constructor(grammarController, options = {}) {
      console.log('üó®Ô∏è Initializing GrammarChat...');
      
      // Tham chi·∫øu ƒë·∫øn controller ch√≠nh
      this.grammarController = grammarController;
      
      // C√°c t√πy ch·ªçn
      this.maxQuestions = options.maxQuestions || 5;
        this.currentTopic = null;
        this.questionCount = parseInt(localStorage.getItem('bibi-question-count') || '0');

        // Th√™m try-catch cho to√†n b·ªô qu√° tr√¨nh kh·ªüi t·∫°o
        try {
        // Ki·ªÉm tra xem c√≥ ch·ªß ƒë·ªÅ n√†o ƒë√£ l∆∞u kh√¥ng
        const savedTopic = localStorage.getItem('bibi-current-topic');
        if (savedTopic) {
            this.currentTopic = savedTopic;
            console.log(`üîÑ ƒê√£ kh√¥i ph·ª•c ch·ªß ƒë·ªÅ l∆∞u tr·ªØ: "${this.currentTopic}"`);
        }
        } catch (error) {
        console.error('L·ªói khi kh√¥i ph·ª•c ch·ªß ƒë·ªÅ:', error);
        }
      
      // Kh·ªüi t·∫°o ph·∫ßn t·ª≠ DOM
      this.chatContainer = document.getElementById('follow-up-chat');
      this.messagesContainer = document.getElementById('chat-messages');
      this.chatInput = document.getElementById('chat-input');
      this.sendButton = document.getElementById('send-chat');
      this.closeButton = document.getElementById('close-chat');
      this.chatOverlay = document.getElementById('chat-overlay');
      this.counterElement = document.getElementById('chat-count');
      this.suggestedQuestions = document.getElementById('suggested-questions');
      
      // Ki·ªÉm tra xem c√°c ph·∫ßn t·ª≠ c√≥ t·ªìn t·∫°i kh√¥ng
      if (!this.chatContainer || !this.messagesContainer || !this.chatInput || 
          !this.sendButton || !this.closeButton || !this.chatOverlay || !this.counterElement) {
        console.error("‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªß ph·∫ßn t·ª≠ DOM cho t√≠nh nƒÉng chat");
        return;
      }
      
      // Kh·ªüi t·∫°o c√°c event listener
      this.initEventListeners();
      
      console.log('‚úÖ GrammarChat ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng');
    }
    
    // Thi·∫øt l·∫≠p c√°c event listener
    initEventListeners() {
        // S·ª± ki·ªán khi ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn
        if (this.sendButton) {
        this.sendButton.addEventListener('click', () => this.sendMessage());
        }
        
        // Ki·ªÉm tra n√∫t g·ª≠i kh√°c (n·∫øu c√≥)
        const otherSendButton = document.getElementById('send-chat-btn');
        if (otherSendButton && otherSendButton !== this.sendButton) {
        otherSendButton.addEventListener('click', () => this.sendMessage());
        }
        
        // X·ª≠ l√Ω ph√≠m Enter
        if (this.chatInput) {
        this.chatInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            this.sendMessage();
            }
        });
        }
        
        // S·ª± ki·ªán ƒë√≥ng chat
        if (this.closeButton) {
        this.closeButton.addEventListener('click', () => this.hideChat());
        }
        
        if (this.chatOverlay) {
        this.chatOverlay.addEventListener('click', () => this.hideChat());
        }
        
        // Th√™m n√∫t chat v√†o c√°c k·∫øt qu·∫£ ng·ªØ ph√°p
        this.addChatButtonsToResults();
        // Theo d√µi thay ƒë·ªïi ng√¥n ng·ªØ
        const langButtons = document.querySelectorAll('.lang-btn');
        if (langButtons.length > 0) {
            langButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    // L∆∞u ch·ªß ƒë·ªÅ hi·ªán t·∫°i tr∆∞·ªõc khi reset
                    const currentTopic = this.currentTopic;
                    
                    // Reset chat khi ƒë·ªïi ng√¥n ng·ªØ nh∆∞ng gi·ªØ nguy√™n ch·ªß ƒë·ªÅ
                    setTimeout(() => {
                        this.resetChat();
                        this.currentTopic = currentTopic; // Kh√¥i ph·ª•c ch·ªß ƒë·ªÅ
                        console.log(`üîÑ ƒê√£ reset chat khi ƒë·ªïi ng√¥n ng·ªØ, gi·ªØ ch·ªß ƒë·ªÅ: ${this.currentTopic}`);
                    }, 500);
                });
            });
        }
        
        // Theo d√µi thay ƒë·ªïi tab n·ªôi dung
        const tabButtons = document.querySelectorAll('.tab-btn');
        if (tabButtons.length > 0) {
            tabButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    // Kh√¥ng reset chat ho√†n to√†n, ch·ªâ c·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ
                    this.updateCurrentTopic();
                });
            });
        }
    }
    
    // Hi·ªÉn th·ªã chat
    showChat() {
      // C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ hi·ªán t·∫°i t·ª´ controller
      this.updateCurrentTopic();
      
      // Hi·ªÉn th·ªã chat v√† overlay
      this.chatContainer.style.display = 'flex';
      this.chatOverlay.style.display = 'block';
      
      // Focus v√†o √¥ nh·∫≠p li·ªáu
      setTimeout(() => {
        this.chatInput.focus();
      }, 100);
      
      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng c√¢u h·ªèi c√≤n l·∫°i
      this.updateQuestionCounter();
      
      // T·∫°o c√¢u h·ªèi g·ª£i √Ω d·ª±a tr√™n ch·ªß ƒë·ªÅ
      this.generateSuggestedQuestions();
    }
    
    // ·∫®n chat
    hideChat() {
      this.chatContainer.style.display = 'none';
      this.chatOverlay.style.display = 'none';
    }
    
    // Th√™m n√∫t chat v√†o k·∫øt qu·∫£ ng·ªØ ph√°p
    addChatButtonsToResults() {
        console.log('üí¨ ƒê·∫£m b·∫£o ch·ªâ c√≥ m·ªôt n√∫t chat to√†n c·ª•c');
        
        // X√≥a t·∫•t c·∫£ c√°c n√∫t chat trong grammar card
        const removeAllChatButtons = () => {
            // X√≥a t·∫•t c·∫£ c√°c n√∫t chat ƒë√£ ƒë∆∞·ª£c th√™m tr∆∞·ªõc ƒë√≥
            document.querySelectorAll('.grammar-card-actions, .chat-btn, .follow-up-container').forEach(el => {
                if (el.id !== 'chat-overlay-toggle' && el.id !== 'follow-up-chat') {
                    el.remove();
                }
            });
        };
        
        // X√≥a ngay l·∫≠p t·ª©c
        removeAllChatButtons();
        
        // ƒê·∫£m b·∫£o n√∫t chat to√†n c·ª•c ho·∫°t ƒë·ªông
        const chatButton = document.getElementById('chat-overlay-toggle');
        if (chatButton) {
            // X√≥a t·∫•t c·∫£ event listeners hi·ªán t·∫°i
            const newButton = chatButton.cloneNode(true);
            chatButton.parentNode.replaceChild(newButton, chatButton);
            
            // Th√™m event listener m·ªõi
            newButton.addEventListener('click', () => {
                console.log('üñ±Ô∏è N√∫t chat to√†n c·ª•c ƒë∆∞·ª£c nh·∫•p');
                this.showChat();
            });
        }
        
        // ƒê·∫∑t MutationObserver m·∫°nh m·∫Ω h∆°n
        const observer = new MutationObserver((mutations) => {
            removeAllChatButtons();
        });
        
        // Quan s√°t to√†n b·ªô document
        observer.observe(document.documentElement, { 
            childList: true, 
            subtree: true 
        });
    }
    
    // C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ hi·ªán t·∫°i
    updateCurrentTopic() {
        // L∆∞u ch·ªß ƒë·ªÅ hi·ªán t·∫°i tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        const oldTopic = this.currentTopic;
        
        // L·∫•y ch·ªß ƒë·ªÅ t·ª´ ti√™u ƒë·ªÅ ho·∫∑c t·ª´ controller
        const h3Element = document.querySelector('.grammar-card h3');
        if (h3Element) {
        // Lo·∫°i b·ªè ph·∫ßn emoji v√† c√°c badge kh·ªèi ti√™u ƒë·ªÅ
        const fullTitle = h3Element.textContent || '';
        this.currentTopic = fullTitle
          .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]|\u200D/g, '') // Lo·∫°i b·ªè emoji
          .replace(/RAG|AI/g, '') // Lo·∫°i b·ªè c√°c badge
          .replace(/^\s*[üìù‚úèÔ∏èüìã‚ö†Ô∏è]\s*/, '') // Lo·∫°i b·ªè emoji ƒë·∫ßu ti√™n n·∫øu c√≥
          .replace(/Gi·∫£i th√≠ch v·ªÅ|V√≠ d·ª• v·ªÅ|B√†i t·∫≠p v·ªÅ|L·ªói th∆∞·ªùng g·∫∑p v·ªÅ/g, '')
          .trim();
        
        console.log(`üîç ƒê√£ x√°c ƒë·ªãnh ch·ªß ƒë·ªÅ hi·ªán t·∫°i: "${this.currentTopic}"`);
        if (oldTopic !== this.currentTopic) {
            this.resetQuotaForNewTopic(this.currentTopic);
          }
        } else if (this.grammarController.lastTopic) {
          const newTopic = this.grammarController.lastTopic;
          if (oldTopic !== newTopic) {
            this.currentTopic = newTopic;
            this.resetQuotaForNewTopic(newTopic);
          }
        } else {
          this.currentTopic = this.grammarController.getSelectedGrammarTopic() || "ng·ªØ ph√°p";
        }
    }
    
    // T·∫°o tin nh·∫Øn ng∆∞·ªùi d√πng
    addUserMessage(message) {
      const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      const messageElement = document.createElement('div');
      messageElement.className = 'user-message';
      messageElement.innerHTML = `
        ${message}
        <div class="message-time">${time}</div>
      `;
      this.messagesContainer.appendChild(messageElement);
      this.scrollToBottom();
    }
    
    // T·∫°o tin nh·∫Øn bot
    addBotMessage(message) {
      const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      const messageElement = document.createElement('div');
      messageElement.className = 'bot-message';
      messageElement.innerHTML = `
        ${message}
        <div class="message-time">${time}</div>
      `;
      this.messagesContainer.appendChild(messageElement);
      this.scrollToBottom();
    }
    
    // Th√™m tin nh·∫Øn h·ªá th·ªëng
    addSystemMessage(message) {
      const messageElement = document.createElement('div');
      messageElement.className = 'system-message';
      messageElement.textContent = message;
      this.messagesContainer.appendChild(messageElement);
      this.scrollToBottom();
    }
    
    // Hi·ªÉn th·ªã ƒëang nh·∫≠p
    showTypingIndicator() {
      const typingElement = document.createElement('div');
      typingElement.className = 'typing-indicator';
      typingElement.id = 'typing-indicator';
      typingElement.innerHTML = `
        <span></span>
        <span></span>
        <span></span>
      `;
      this.messagesContainer.appendChild(typingElement);
      this.scrollToBottom();
    }
    
    // ·∫®n ƒëang nh·∫≠p
    hideTypingIndicator() {
      const typingElement = document.getElementById('typing-indicator');
      if (typingElement) {
        typingElement.remove();
      }
    }
    
    // Cu·ªôn xu·ªëng d∆∞·ªõi c√πng
    scrollToBottom() {
      this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
    }
    
    // G·ª≠i tin nh·∫Øn v√† x·ª≠ l√Ω
    async sendMessage() {
        const message = this.chatInput.value.trim();
        if (!message) return;
        
        // Ki·ªÉm tra s·ªë l∆∞·ª£ng c√¢u h·ªèi c√≤n l·∫°i
        if (this.questionCount >= this.maxQuestions) {
        this.addSystemMessage("B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt s·ªë l∆∞·ª£ng c√¢u h·ªèi cho ph√©p.");
        return;
        }
        
        // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o chat
        this.addUserMessage(message);
        this.chatInput.value = '';
        
        // TƒÉng s·ªë l∆∞·ª£ng c√¢u h·ªèi ƒë√£ s·ª≠ d·ª•ng
        this.questionCount++;
        this.updateQuestionCounter();
        
        // Hi·ªÉn th·ªã ƒëang nh·∫≠p
        this.showTypingIndicator();
        
        try {
        // T·∫°o prompt v·ªõi context v·ªÅ ch·ªß ƒë·ªÅ hi·ªán t·∫°i
        const promptWithContext = `Tr·∫£ l·ªùi c√¢u h·ªèi sau ƒë√¢y v·ªÅ ch·ªß ƒë·ªÅ "${this.currentTopic}": ${message}`;
        
        // Chu·∫©n b·ªã messages cho API
        const messages = [
            {
              role: "system",
              content: `B·∫°n l√† tr·ª£ l√Ω AI d√†nh ri√™ng cho GI√ÅO VI√äN TI·∫æNG ANH l·ªõp 6, ch·ªâ h·ªó tr·ª£ vi·ªác GI·∫¢NG D·∫†Y NG·ªÆ PH√ÅP ch·ªß ƒë·ªÅ: "${this.currentTopic}".
          
          ‚ö†Ô∏è QUY T·∫ÆC B·∫ÆT BU·ªòC:
          1. Ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn VI·ªÜC D·∫†Y ho·∫∑c H·ªåC ch·ªß ƒë·ªÅ "${this.currentTopic}" trong ti·∫øng Anh l·ªõp 6.
          2. T·ª™ CH·ªêI m·ªçi c√¢u h·ªèi ngo√†i ch·ªß ƒë·ªÅ "${this.currentTopic}" ‚Äî bao g·ªìm c·∫£ c√°c ch·ªß ƒë·ªÅ ng·ªØ ph√°p kh√°c ho·∫∑c c√°c lƒ©nh v·ª±c kh√°c ngo√†i vi·ªác gi·∫£ng d·∫°y.
          3. N·∫øu c√¢u h·ªèi KH√îNG li√™n quan, tr·∫£ l·ªùi ƒë√∫ng theo m·∫´u:
             "Xin l·ªói, t√¥i ch·ªâ h·ªó tr·ª£ v·ªÅ gi·∫£ng d·∫°y v√† h·ªçc ch·ªß ƒë·ªÅ '${this.currentTopic}'. Vui l√≤ng h·ªèi v·ªÅ ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y, b√†i t·∫≠p, v√≠ d·ª• ho·∫∑c c√°ch gi·∫£i th√≠ch ƒëi·ªÉm ng·ªØ ph√°p n√†y."
          4. Kh√¥ng tr·∫£ l·ªùi d√†i d√≤ng ‚Äî lu√¥n gi·ªõi h·∫°n ƒë·ªô d√†i trong **150-200 t·ª´**.
          
          üéØ M·ª•c ti√™u: Gi√∫p gi√°o vi√™n hi·ªÉu s√¢u v√† d·ªÖ d√†ng truy·ªÅn ƒë·∫°t ƒëi·ªÉm ng·ªØ ph√°p "${this.currentTopic}" m·ªôt c√°ch r√µ r√†ng, c√≥ v√≠ d·ª•, ng·∫Øn g·ªçn.`
            },
            {
              role: "user",
              content: `C√¢u h·ªèi c·ªßa gi√°o vi√™n li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ "${this.currentTopic}": ${message}`
            }
          ];          
        
        // G·ªçi API t·ª´ grammar-api ƒë·ªÉ l·∫•y c√¢u tr·∫£ l·ªùi
        try {
            const response = await this.grammarController.api.streamBiBiResponse(
            messages,
            (chunk, fullContent) => {
                // C·∫≠p nh·∫≠t tin nh·∫Øn bot ƒëang hi·ªÉn th·ªã
                this.hideTypingIndicator();
                const formattedContent = this.grammarController.ui.formatContent(fullContent);
                
                const existingMessage = document.querySelector('.bot-message:last-child');
                if (existingMessage) {
                // C·∫≠p nh·∫≠t n·ªôi dung, gi·ªØ nguy√™n th·ªùi gian
                const timeElement = existingMessage.querySelector('.message-time');
                if (timeElement) {
                    const time = timeElement.textContent;
                    existingMessage.innerHTML = `${formattedContent}<div class="message-time">${time}</div>`;
                } else {
                    existingMessage.innerHTML = formattedContent;
                }
                } else {
                this.addBotMessage(formattedContent);
                }
            },
            {
                skipCache: true,   // Kh√¥ng cache c√¢u h·ªèi chat
                useRAG: true,      // S·ª≠ d·ª•ng RAG n·∫øu c√≥ th·ªÉ
                temperature: 0.8    // Nhi·ªát ƒë·ªô cao h∆°n cho c√¢u tr·∫£ l·ªùi s√°ng t·∫°o
            }
            );
        } catch (error) {
            console.error("L·ªói khi g·ªçi API:", error);
            this.hideTypingIndicator();
            this.addSystemMessage("C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.");
        }
        
        // C·∫≠p nh·∫≠t c√¢u h·ªèi g·ª£i √Ω m·ªõi
        this.generateSuggestedQuestions();
        } catch (error) {
        console.error("L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi:", error);
        this.hideTypingIndicator();
        this.addSystemMessage("C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.");
        }
    }
    
    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng c√¢u h·ªèi c√≤n l·∫°i
    updateQuestionCounter() {
        const remaining = Math.max(0, this.maxQuestions - this.questionCount);
        this.counterElement.textContent = remaining;
        
        // L∆∞u l·∫°i s·ªë c√¢u h·ªèi ƒë√£ s·ª≠ d·ª•ng
        localStorage.setItem('bibi-question-count', this.questionCount.toString());
        
        // C·∫≠p nh·∫≠t phong c√°ch c·ªßa counter d·ª±a tr√™n s·ªë l∆∞·ª£ng c√≤n l·∫°i
        if (remaining <= 1) {
          this.counterElement.parentElement.style.backgroundColor = 'rgba(255,0,0,0.2)';
        } else if (remaining <= 2) {
          this.counterElement.parentElement.style.backgroundColor = 'rgba(255,165,0,0.2)';
        } else {
          this.counterElement.parentElement.style.backgroundColor = 'rgba(255,255,255,0.2)';
        }
        
        // ·∫®n hi·ªán ph·∫ßn g·ª£i √Ω c√¢u h·ªèi
        const suggestionsElement = document.getElementById('suggested-questions');
        if (suggestionsElement) {
          // ·∫®n g·ª£i √Ω khi h·∫øt c√¢u h·ªèi
          suggestionsElement.style.display = remaining > 0 ? 'block' : 'none';
        }
        
        // TH√äM CODE X·ª¨ L√ù TH√îNG B√ÅO
        if (remaining <= 0) {
          // X√≥a c√°c th√¥ng b√°o "h·∫øt quota" c≈© n·∫øu c√≥
          const oldMessages = this.messagesContainer.querySelectorAll('.system-message.quota-message');
          oldMessages.forEach(msg => msg.remove());
          
          // Th√™m th√¥ng b√°o m·ªõi
          const messageElement = document.createElement('div');
          messageElement.className = 'system-message quota-message';
          messageElement.textContent = "B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt s·ªë l∆∞·ª£ng c√¢u h·ªèi cho ph√©p.";
          this.messagesContainer.appendChild(messageElement);
          this.scrollToBottom();
        }
      }
      
      // Th√™m h√†m resetQuotaForNewTopic:
      resetQuotaForNewTopic(newTopic) {
        // N·∫øu ch·ªß ƒë·ªÅ m·ªõi kh√°c ho·∫∑c kh√¥ng c√≥ ch·ªß ƒë·ªÅ c≈©, reset quota
        if (newTopic && (this.currentTopic === null || newTopic !== this.currentTopic)) {
          console.log(`üîÑ Chuy·ªÉn sang ch·ªß ƒë·ªÅ m·ªõi "${newTopic}", reset quota c√¢u h·ªèi`);
          this.questionCount = 0;
          localStorage.setItem('bibi-question-count', '0');
          this.updateQuestionCounter();
          
          // C·∫≠p nh·∫≠t th√¥ng b√°o h·ªá th·ªëng
          const systemMsg = document.createElement('div');
          systemMsg.className = 'system-message';
          systemMsg.textContent = `ƒê√£ chuy·ªÉn sang ch·ªß ƒë·ªÅ "${newTopic}". B·∫°n c√≥ th·ªÉ h·ªèi th√™m 5 c√¢u h·ªèi m·ªõi.`;
          this.messagesContainer.appendChild(systemMsg);
          this.scrollToBottom();
        }
      }
      
    
    
    // T·∫°o v√† hi·ªÉn th·ªã c√¢u h·ªèi g·ª£i √Ω
    generateSuggestedQuestions() {
        if (!this.suggestedQuestions) return;
        
        // L√†m s·∫°ch container c√¢u h·ªèi g·ª£i √Ω
        const buttonsContainer = this.suggestedQuestions.querySelector('.suggest-buttons');
        if (buttonsContainer) {
          buttonsContainer.innerHTML = '';
        } else {
          return;
        }
        
        // T·∫°o c√¢u h·ªèi g·ª£i √Ω d·ª±a tr√™n ch·ªß ƒë·ªÅ hi·ªán t·∫°i
        const suggestedQs = this.getSuggestedQuestions(this.currentTopic);
        
        // T·∫°o n√∫t g·ª£i √Ω r√∫t g·ªçn
        const compactButton = document.createElement('button');
        compactButton.className = 'suggest-compact-btn';
        compactButton.innerHTML = '<i class="fas fa-lightbulb"></i> Xem g·ª£i √Ω';
        compactButton.addEventListener('click', (e) => {
          e.preventDefault();
          const dropdown = document.getElementById('suggest-dropdown');
          dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';
        });
        buttonsContainer.appendChild(compactButton);
        
        // T·∫°o dropdown ch·ª©a c√°c c√¢u h·ªèi g·ª£i √Ω
        const dropdown = document.createElement('div');
        dropdown.id = 'suggest-dropdown';
        dropdown.className = 'suggest-dropdown';
        dropdown.style.display = 'none';
        
        // Th√™m c√°c c√¢u h·ªèi g·ª£i √Ω v√†o dropdown
        suggestedQs.forEach(question => {
          const item = document.createElement('div');
          item.className = 'suggest-item';
          item.textContent = question;
          item.addEventListener('click', () => {
            this.chatInput.value = question;
            dropdown.style.display = 'none';
            this.sendMessage();
          });
          dropdown.appendChild(item);
        });
        
        buttonsContainer.appendChild(dropdown);
    }
    
    // Danh s√°ch c√¢u h·ªèi g·ª£i √Ω d·ª±a tr√™n ch·ªß ƒë·ªÅ
    getSuggestedQuestions(topic) {
        // C√¢u h·ªèi chung cho m·ªçi ch·ªß ƒë·ªÅ - c·ª• th·ªÉ h∆°n cho gi√°o vi√™n
        const generalQuestions = [
            `Ph∆∞∆°ng ph√°p d·∫°y "${topic}" ph√π h·ª£p v·ªõi h·ªçc sinh l·ªõp 6?`,
            `B√†i t·∫≠p v·ªÅ "${topic}" ph·ªï bi·∫øn trong SGK l·ªõp 6?`,
            `C√°ch gi·∫£i th√≠ch "${topic}" ƒë∆°n gi·∫£n cho h·ªçc sinh?`,
            `K·ªπ thu·∫≠t ki·ªÉm tra hi·ªÉu bi·∫øt v·ªÅ "${topic}"?`
        ];
        
        // C√¢u h·ªèi ƒë·∫∑c th√π cho t·ª´ng ch·ªß ƒë·ªÅ
        const topicKeywords = {
            'present simple': [
                "Khi n√†o th√™m -s/-es cho ƒë·ªông t·ª´ hi·ªán t·∫°i ƒë∆°n?",
                "Quy t·∫Øc h·ªçc thu·ªôc v·ªÅ ƒë·ªông t·ª´ ƒë·∫∑c bi·ªát?",
                "C√°ch ph√¢n bi·ªát hi·ªán t·∫°i ƒë∆°n vs hi·ªán t·∫°i ti·∫øp di·ªÖn?"
            ],
            'present continuous': [
                "Quy t·∫Øc th√™m -ing cho ƒë·ªông t·ª´ ƒë·∫∑c bi·ªát?",
                "Nh·ªØng ƒë·ªông t·ª´ c·∫•m d√πng v·ªõi th√¨ ti·∫øp di·ªÖn?",
                "Tr∆∞·ªùng h·ª£p nh·∫ßm l·∫´n gi·ªØa hi·ªán t·∫°i ƒë∆°n v√† ti·∫øp di·ªÖn?"
            ],
            'past simple': [
                "B·∫£ng ƒë·ªông t·ª´ b·∫•t quy t·∫Øc quan tr·ªçng cho l·ªõp 6?",
                "B√†i t·∫≠p v·ªÅ qu√° kh·ª© ƒë∆°n ph√π h·ª£p l·ªõp 6?",
                "C√°ch gi·∫£i th√≠ch did, didn't, was, were d·ªÖ hi·ªÉu?"
            ],
            'article': [
                "Quy t·∫Øc d·ªÖ nh·ªõ v·ªÅ a/an cho h·ªçc sinh l·ªõp 6?",
                "Tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng the/kh√¥ng d√πng the?",
                "B√†i t·∫≠p hay v·ªÅ m·∫°o t·ª´ cho l·ªõp 6?"
            ]
        };
        
        // T√¨m ch·ªß ƒë·ªÅ ph√π h·ª£p
        let specificQuestions = [];
        const topicLower = topic.toLowerCase();
        
        for (const [keyword, questions] of Object.entries(topicKeywords)) {
            if (topicLower.includes(keyword)) {
                specificQuestions = questions;
                break;
            }
        }
        
        // K·∫øt h·ª£p c√¢u h·ªèi ƒë·∫∑c th√π v√† chung
        const combined = [...specificQuestions, ...generalQuestions];
        
        // L·∫•y t·ªëi ƒëa 4 c√¢u h·ªèi
        return combined.slice(0, 4);
    }
    
    // Reset chat khi chuy·ªÉn ch·ªß ƒë·ªÅ
    resetChat() {
      this.questionCount = 0;
      this.updateQuestionCounter();
      
      // X√≥a t·∫•t c·∫£ tin nh·∫Øn tr·ª´ tin nh·∫Øn h·ªá th·ªëng ƒë·∫ßu ti√™n
      const messages = this.messagesContainer.querySelectorAll('.user-message, .bot-message');
      messages.forEach(msg => msg.remove());
      
      // C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ m·ªõi
      this.updateCurrentTopic();
      
      // C·∫≠p nh·∫≠t c√¢u h·ªèi g·ª£i √Ω
      this.generateSuggestedQuestions();
            // ƒê·∫£m b·∫£o ph·∫ßn g·ª£i √Ω lu√¥n hi·ªÉn th·ªã ngay tr√™n khung nh·∫≠p li·ªáu
            const chatInputContainer = document.querySelector('.chat-input-container');
            const suggestedQuestions = document.getElementById('suggested-questions');
            if (chatInputContainer && suggestedQuestions) {
                // Di chuy·ªÉn ph·∫ßn g·ª£i √Ω tr∆∞·ªõc khung nh·∫≠p
                chatInputContainer.parentNode.insertBefore(suggestedQuestions, chatInputContainer);
                // ƒê·∫£m b·∫£o n√≥ hi·ªÉn th·ªã
                suggestedQuestions.style.display = 'block';
            }
        }
    }