// Module x·ª≠ l√Ω giao di·ªán user
export class GrammarUI {
  constructor(outputAreaId, loadingIndicatorId, uiMode = 'modern') {
    this.outputArea = document.getElementById(outputAreaId);
    this.loadingIndicator = document.getElementById(loadingIndicatorId);
    this.isLoading = false;
    this.startLoadingTime = 0;
    this.uiMode = uiMode;
    
    console.log(`üñåÔ∏è GrammarUI kh·ªüi t·∫°o v·ªõi ch·∫ø ƒë·ªô: ${this.uiMode}`);
  }
  
  // Hi·ªÉn th·ªã loading placeholder th√¥ng minh
  showLoading() {
    this.isLoading = true;
    this.startLoadingTime = Date.now();
    
    if (this.loadingIndicator) {
      this.loadingIndicator.style.display = 'flex';
    }
    
    // Ch·ªçn template placeholder d·ª±a tr√™n ch·∫ø ƒë·ªô UI
    let placeholderTemplate;
    
    if (this.uiMode === 'modern') {
      placeholderTemplate = `
        <div class="grammar-card">
          <div class="loading-placeholder placeholder-title"></div>
          
          <h3>ƒêang chu·∫©n b·ªã n·ªôi dung...</h3>
          
          <div class="loading-placeholder placeholder-paragraph" style="width: 95%"></div>
          <div class="loading-placeholder placeholder-paragraph" style="width: 88%"></div>
          
          <h4 style="margin-top: 20px;">C·∫•u tr√∫c ng·ªØ ph√°p</h4>
          <div class="loading-placeholder placeholder-paragraph" style="width: 90%"></div>
          <div class="loading-placeholder placeholder-paragraph" style="width: 75%"></div>
          
          <h4 style="margin-top: 20px;">V√≠ d·ª• minh h·ªça</h4>
          <div class="placeholder-list">
            <div class="loading-placeholder placeholder-list-item" style="width: 85%"></div>
            <div class="loading-placeholder placeholder-list-item" style="width: 90%"></div>
            <div class="loading-placeholder placeholder-list-item" style="width: 80%"></div>
          </div>
          
          <div class="loading-placeholder placeholder-paragraph" style="width: 60%; margin-top: 20px;"></div>
        </div>
      `;
    } else {
      // Template cho giao di·ªán classic
      placeholderTemplate = `
        <div class="grammar-card classic-style">
          <div class="loading-placeholder placeholder-title"></div>
          
          <h3>ƒêang chu·∫©n b·ªã n·ªôi dung...</h3>
          
          <div class="loading-placeholder placeholder-paragraph" style="width: 95%"></div>
          <div class="loading-placeholder placeholder-paragraph" style="width: 88%"></div>
          
          <h4 style="margin-top: 20px;">C·∫•u tr√∫c ng·ªØ ph√°p</h4>
          <div class="loading-placeholder placeholder-paragraph" style="width: 90%"></div>
          <div class="loading-placeholder placeholder-paragraph" style="width: 75%"></div>
        </div>
      `;
    }
    
    this.outputArea.innerHTML = placeholderTemplate;
  }

  // ·∫®n tr·∫°ng th√°i loading
  hideLoading() {
    this.isLoading = false;
    const loadingTime = (Date.now() - this.startLoadingTime) / 1000;
    console.log(`Th·ªùi gian ph·∫£n h·ªìi: ${loadingTime.toFixed(2)}s`);
    
    if (this.loadingIndicator) {
      this.loadingIndicator.style.display = 'none';
    }
  }

  // ƒê·ªãnh d·∫°ng n·ªôi dung Markdown sang HTML
  formatContent(content, options = {}) {
    if (!content) return '';
    
    // X√°c ƒë·ªãnh ng√¥n ng·ªØ, m·∫∑c ƒë·ªãnh l√† ti·∫øng Vi·ªát
    const language = options.language || 'vi';
    
    // ƒê·ªãnh d·∫°ng c∆° b·∫£n t·ª´ Markdown sang HTML
    let formatted = content
      // Headings
      .replace(/###\s+(.*?)$/gm, '<h3>$1</h3>') 
      .replace(/##\s+(.*?)$/gm, '<h2>$1</h2>')
      .replace(/#\s+(.*?)$/gm, '<h1>$1</h1>')
      
      // Lists
      .replace(/^\s*[-*]\s+(.*?)$/gm, '<li>$1</li>')
      .replace(/^\s*(\d+)\.\s+(.*?)$/gm, '<li>$2</li>') // Ordered lists
      .replace(/(<li>.*?<\/li>(\n|$))+/g, '<ul>$&</ul>')
      
      // Formatting
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/__(.*?)__/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/_(.*?)_/g, '<em>$1</em>')
      
      // Code
      .replace(/`(.*?)`/g, '<code>$1</code>')
      
      // Tables if needed
      .replace(/\|\s*(.*?)\s*\|/g, '<td>$1</td>')
      .replace(/(<td>.*?<\/td>)+/g, '<tr>$&</tr>')
      .replace(/(<tr>.*?<\/tr>)+/g, '<table>$&</table>')
      
      // Paragraphs and line breaks
      .replace(/\n\n/g, '</p><p>')
      .replace(/\n/g, '<br>');
    
    // Wrap in paragraph if not already HTML
    if (!formatted.startsWith('<')) {
      formatted = '<p>' + formatted + '</p>';
    }
    
    // X·ª≠ l√Ω ƒë·ªãnh d·∫°ng song ng·ªØ (khi language=both)
    if (language === 'both' && content.includes('(') && content.includes(')')) {
      // T√¨m c√°c ph·∫ßn trong ngo·∫∑c - th∆∞·ªùng l√† ph·∫ßn ti·∫øng Anh trong n·ªôi dung song ng·ªØ
      formatted = formatted.replace(/\(([^()]+)\)/g, function(match, p1) {
        return `<span class="en-content">(${p1})</span>`;
      });
    }
    
    // Th√™m c√°c l·ªõp CSS d·ª±a v√†o ch·∫ø ƒë·ªô UI
    if (this.uiMode === 'modern') {
      // Th√™m class hi·ªán ƒë·∫°i cho c√°c th√†nh ph·∫ßn
      formatted = formatted
        .replace(/<h1>/g, '<h1 class="modern-title-large">')
        .replace(/<h2>/g, '<h2 class="modern-title">')
        .replace(/<h3>/g, '<h3 class="modern-subtitle">')
        .replace(/<ul>/g, '<ul class="modern-list">')
        .replace(/<ol>/g, '<ol class="modern-list">')
        .replace(/<p>/g, '<p class="modern-paragraph">')
        .replace(/<table>/g, '<table class="modern-table">')
        .replace(/<code>/g, '<code class="modern-code">');
    }
    
    return formatted;
  }

  // Hi·ªÉn th·ªã k·∫øt qu·∫£
  showResult(title, content, promptType) {
    const formattedContent = this.formatContent(content);
    
    // Ch·ªçn template d·ª±a v√†o ch·∫ø ƒë·ªô UI
    let resultTemplate;
    
    if (this.uiMode === 'modern') {
      resultTemplate = `
        <div class="grammar-card">
          <h3 data-action="${promptType}">${title}</h3>
          <div class="grammar-content">${formattedContent}</div>
        </div>
      `;
    } else {
      // Template cho giao di·ªán classic
      resultTemplate = `
        <div class="grammar-card classic-style">
          <h3 data-action="${promptType}">${title}</h3>
          <div class="grammar-content classic-style">${formattedContent}</div>
        </div>
      `;
    }
    
    this.outputArea.innerHTML = resultTemplate;
  }

  // Hi·ªÉn th·ªã l·ªói
  showError(error) {
    this.outputArea.innerHTML = `
      <div class="error">
        <p>C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.</p>
        <p class="error-details">${error.message || 'Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt'}</p>
      </div>`;
  }
  
  // Th√™m v√†o class GrammarUI trong grammar-ui.js
  initStreamingUI(title, promptType, outputAreaId = null) {
    // Ch·ªçn template d·ª±a v√†o ch·∫ø ƒë·ªô UI
    let streamingTemplate;
    
    // S·ª≠ d·ª•ng outputAreaId ƒë∆∞·ª£c cung c·∫•p ho·∫∑c m·∫∑c ƒë·ªãnh
    const outputArea = outputAreaId ? document.getElementById(outputAreaId) : this.outputArea;
    if (!outputArea) {
      console.error(`Kh√¥ng t√¨m th·∫•y khu v·ª±c output: ${outputAreaId}`);
      return null;
    }
    
    if (this.uiMode === 'modern') {
      streamingTemplate = `
        <div class="grammar-card">
          <h3 data-action="${promptType}">${title}</h3>
          <div id="streaming-content-${promptType}" class="grammar-content streaming-content"></div>
        </div>
      `;
    } else {
      // Template cho giao di·ªán classic
      streamingTemplate = `
        <div class="grammar-card classic-style">
          <h3 data-action="${promptType}">${title}</h3>
          <div id="streaming-content-${promptType}" class="grammar-content streaming-content classic-style"></div>
        </div>
      `;
    }
    
    outputArea.innerHTML = streamingTemplate;
    return document.getElementById(`streaming-content-${promptType}`);
  }

  // Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t n·ªôi dung streaming v·ªõi h·ªó tr·ª£ RAG
  updateStreamingContent(contentElement, newContent, fullContent, ragInfo = null) {
    // ƒê·ªãnh d·∫°ng Markdown ngay khi nh·∫≠n ƒë∆∞·ª£c n·ªôi dung
    const formattedContent = this.formatContent(fullContent);
    contentElement.innerHTML = formattedContent;
    
    // TH√äM M·ªöI: X·ª≠ l√Ω hi·ªÉn th·ªã RAG s·ªõm n·∫øu c√≥ th√¥ng tin
    if (ragInfo && ragInfo.usedRAG === true && ragInfo.sources && ragInfo.sources.length > 0) {
      // Ki·ªÉm tra xem ƒë√£ c√≥ hi·ªÉn th·ªã RAG ch∆∞a
      const hasRagBadge = contentElement.querySelector('.rag-badge');
      const hasRagSources = contentElement.querySelector('.rag-sources, .rag-sources-simple, .early-rag-notice');
      
      // Th√™m badge RAG s·ªõm n·∫øu ch∆∞a c√≥
      if (!hasRagBadge) {
        const h3Element = contentElement.closest('.grammar-card')?.querySelector('h3');
        if (h3Element && !h3Element.querySelector('.rag-badge')) {
          const badgeHtml = `<span class="rag-badge rag-success tooltip">üìö RAG<span class="tooltip-text">N·ªôi dung ƒë∆∞·ª£c tr√≠ch t·ª´ s√°ch gi√°o khoa th√¥ng qua h·ªá th·ªëng RAG</span></span>`;
          h3Element.innerHTML += ' ' + badgeHtml;
          console.log('‚úÖ ƒê√£ th√™m badge RAG s·ªõm trong qu√° tr√¨nh streaming');
        }
      }
      
      // Hi·ªÉn th·ªã th√¥ng b√°o ngu·ªìn RAG s·ªõm n·∫øu ch∆∞a c√≥
      if (!hasRagSources) {
        const ragNotice = document.createElement('div');
        ragNotice.className = 'early-rag-notice';
        ragNotice.innerHTML = `
          <div style="margin: 15px 0; padding: 8px 12px; background-color: rgba(76, 175, 80, 0.1); 
                      border-left: 4px solid #4CAF50; border-radius: 4px;">
            <p><strong>üìö ƒê√£ t√¨m th·∫•y ${ragInfo.sources.length} t√†i li·ªáu li√™n quan</strong></p>
          </div>
        `;
        contentElement.appendChild(ragNotice);
        console.log('‚úÖ ƒê√£ th√™m th√¥ng b√°o RAG s·ªõm trong qu√° tr√¨nh streaming');
      }
    }
    
    // T·ª± ƒë·ªông cu·ªôn xu·ªëng
    contentElement.scrollIntoView({ behavior: 'smooth', block: 'end' });
  }

  // Ph∆∞∆°ng th·ª©c hi·ªÉn th·ªã ngu·ªìn RAG
  renderRAGSources(ragInfo, container) {
    if (!ragInfo || !ragInfo.usedRAG || !ragInfo.sources || ragInfo.sources.length === 0) {
      return;
    }
    
    // T·∫°o ph·∫ßn hi·ªÉn th·ªã ngu·ªìn RAG
    const sourcesContainer = document.createElement('div');
    sourcesContainer.className = 'rag-sources';
    
    // T·∫°o ti√™u ƒë·ªÅ
    let sourcesHTML = '<h4>üîç Ngu·ªìn tham kh·∫£o:</h4>';
    
    // Nh√≥m c√°c ngu·ªìn theo namespace
    const namespaceSources = {};
    
    // Icon cho t·ª´ng lo·∫°i namespace
    const namespaceIcons = {
      'S√°ch gi√°o khoa': 'üìö',
      'Ch∆∞∆°ng tr√¨nh gi·∫£ng d·∫°y': 'üë®‚Äçüè´',
      'Ng·ªØ ph√°p ti·∫øng Anh': 'üìù',
      'Ngu·ªìn b·ªï sung': 'üìã'
    };
    
    // Nh√≥m ngu·ªìn theo namespace
    ragInfo.sources.forEach((source) => {
      // Tr√≠ch xu·∫•t t√™n namespace t·ª´ ngu·ªìn (format "Namespace - Content")
      const parts = source.split(' - ');
      if (parts.length >= 2) {
        const namespace = parts[0].trim();
        const content = parts.slice(1).join(' - ').trim();
        
        if (!namespaceSources[namespace]) {
          namespaceSources[namespace] = [];
        }
        namespaceSources[namespace].push(content);
      } else {
        // N·∫øu kh√¥ng c√≥ format chu·∫©n, hi·ªÉn th·ªã nguy√™n ngu·ªìn
        if (!namespaceSources['Kh√°c']) {
          namespaceSources['Kh√°c'] = [];
        }
        namespaceSources['Kh√°c'].push(source);
      }
    });
    
    // T·∫°o HTML cho t·ª´ng nh√≥m namespace
    sourcesHTML += '<div class="source-groups">';
    
    for (const namespace in namespaceSources) {
      const sources = namespaceSources[namespace];
      
      // Ch·ªçn icon ph√π h·ª£p
      const icon = namespaceIcons[namespace] || 'üìÑ';
      
      sourcesHTML += `
        <div class="source-group">
          <h5 class="source-group-title">
            <span class="source-group-icon">${icon}</span> ${namespace}
          </h5>
          <div class="source-group-items">
      `;
      
      // Th√™m t·ª´ng ngu·ªìn trong nh√≥m
      sources.forEach((source, index) => {
        sourcesHTML += `<div class="source-item" data-index="${index + 1}">${source}</div>`;
      });
      
      sourcesHTML += `
          </div>
        </div>
      `;
    }
    
    sourcesHTML += '</div>';
    sourcesContainer.innerHTML = sourcesHTML;
    
    // Th√™m v√†o container
    container.appendChild(sourcesContainer);
    
    // Th√™m s·ª± ki·ªán hi·ªÉn th·ªã tooltip cho ngu·ªìn
    const sourceItems = sourcesContainer.querySelectorAll('.source-item');
    sourceItems.forEach(item => {
      const sourceName = item.closest('.source-group')?.querySelector('.source-group-title')?.textContent.trim() || 'Ngu·ªìn';
      item.addEventListener('mouseover', () => {
        item.title = `Th√¥ng tin t·ª´ ${sourceName}`;
      });
    });
    
    return sourcesContainer;
  }

  // Th√™m ph∆∞∆°ng th·ª©c ho√†n t·∫•t streaming
  finalizeStreamingContent(contentElement, fullContent, ragInfo = null) {
    if (!contentElement) return;
    
    // ƒê·ªãnh d·∫°ng l·∫ßn cu·ªëi
    let formattedContent = this.formatContent(fullContent);

    // Kh·ªüi t·∫°o bi·∫øn quan tr·ªçng
    let badgeType = 'disabled'; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
    let badgeHtml = '';
    let tooltipText = '';
    
    // X·ª≠ l√Ω ragInfo ngay t·ª´ ƒë·∫ßu ƒë·ªÉ ƒë·∫£m b·∫£o nh·∫•t qu√°n
    if (ragInfo) {
      // Ki·ªÉm tra v√† kh·ªüi t·∫°o ragInfo.sources n·∫øu c·∫ßn
      if (!ragInfo.sources || !Array.isArray(ragInfo.sources)) {
        ragInfo.sources = [];
        console.log('‚ö†Ô∏è ragInfo.sources kh√¥ng h·ª£p l·ªá, kh·ªüi t·∫°o m·∫£ng r·ªóng');
      }

      // LOGIC ƒê∆†N GI·∫¢N V√Ä R√ï R√ÄNG:
      // 1. N·∫øu c√≥ sources, ƒë·∫∑t usedRAG = true v√† badgeType = 'success'
      // 2. N·∫øu usedRAG = true nh∆∞ng kh√¥ng c√≥ sources, v·∫´n ƒë·∫∑t badgeType = 'success'
      // 3. N·∫øu ƒë√£ c·ªë g·∫Øng RAG nh∆∞ng kh√¥ng c√≥ k·∫øt qu·∫£, ƒë·∫∑t badgeType = 'fallback'
      // 4. M·∫∑c ƒë·ªãnh l√† 'disabled'
      
      if (ragInfo.sources.length > 0) {
        // C√≥ sources l√† ƒëi·ªÅu ki·ªán ƒë·ªß ƒë·ªÉ x√°c ƒë·ªãnh usedRAG = true v√† badge = success
        ragInfo.usedRAG = true;
        badgeType = 'success';
        console.log('‚úÖ C√≥ sources, ƒë·∫∑t usedRAG = true v√† badge = "success"');
      } else if (ragInfo.usedRAG === true) {
        // N·∫øu kh√¥ng c√≥ sources nh∆∞ng usedRAG = true, v·∫´n ƒë·∫∑t badge = success
        badgeType = 'success';
        console.log('‚ö†Ô∏è usedRAG = true nh∆∞ng kh√¥ng c√≥ sources - v·∫´n ƒë·∫∑t badge = "success"');
      } else if (ragInfo.attempted) {
        // ƒê√£ th·ª≠ RAG nh∆∞ng kh√¥ng th√†nh c√¥ng
        badgeType = 'fallback';
        console.log('‚ÑπÔ∏è ƒê√£ th·ª≠ d√πng RAG nh∆∞ng kh√¥ng c√≥ k·∫øt qu·∫£ - badge = "fallback"');
      } else {
        // Kh√¥ng s·ª≠ d·ª•ng RAG
        badgeType = 'disabled';
        console.log('‚ÑπÔ∏è Kh√¥ng s·ª≠ d·ª•ng RAG - badge = "disabled"');
      }

      // ƒê·∫∑t tooltip v√† badgeHtml d·ª±a tr√™n badgeType
      if (badgeType === 'success') {
        tooltipText = 'N·ªôi dung ƒë∆∞·ª£c tr√≠ch t·ª´ s√°ch gi√°o khoa th√¥ng qua h·ªá th·ªëng RAG';
        badgeHtml = `<span class="rag-badge rag-success tooltip">üìö RAG<span class="tooltip-text">${tooltipText}</span></span>`;
      } else if (badgeType === 'fallback') {
        tooltipText = 'N·ªôi dung ƒë∆∞·ª£c t·∫°o b·ªüi AI do kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong s√°ch gi√°o khoa';
        badgeHtml = `<span class="rag-badge rag-fallback tooltip">ü§ñ AI<span class="tooltip-text">${tooltipText}</span></span>`;
      } else {
        tooltipText = 'N·ªôi dung ƒë∆∞·ª£c t·∫°o ho√†n to√†n b·ªüi AI';
        badgeHtml = `<span class="rag-badge rag-disabled tooltip">ü§ñ AI<span class="tooltip-text">${tooltipText}</span></span>`;
      }
      
      // L∆∞u gi√° tr·ªã badgeType ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
      this.currentBadgeType = badgeType;
      
      console.log(`üè∑Ô∏è ƒê√£ x√°c ƒë·ªãnh badge: type=${badgeType}, usedRAG=${ragInfo.usedRAG}, sourcesLength=${ragInfo.sources.length}`);
    }

    // T√¨m th·∫ª h3 ƒë·∫ßu ti√™n ƒë·ªÉ th√™m badge
    const h3Regex = /<h3[^>]*>(.*?)<\/h3>/;
    const h3Match = formattedContent.match(h3Regex);

    // Th√™m badge v√†o ti√™u ƒë·ªÅ
    if (h3Match && badgeHtml) {
      console.log(`üè∑Ô∏è Th√™m badge "${badgeType}" v√†o ti√™u ƒë·ªÅ`);
      formattedContent = formattedContent.replace(
        h3Regex, 
        `<h3${h3Match[0].substring(3, h3Match[0].indexOf('>'))}>${h3Match[1]} ${badgeHtml}</h3>`
      );
    }
    
    // PH·∫¶N HIGHLIGHT N·ªòI DUNG
    if (ragInfo) {
      // X√°c ƒë·ªãnh r√µ r√†ng ƒëi·ªÅu ki·ªán ƒë·ªÉ highlight
      const shouldHighlight = badgeType === 'success';
      
      if (shouldHighlight) {
        try {
          // ƒê·∫£m b·∫£o usedRAG = true
          ragInfo.usedRAG = true;
          
          // T·∫°o th√¥ng b√°o RAG
          const sourcesText = ragInfo.sources.length > 1 
            ? `${ragInfo.sources.length} ngu·ªìn t√†i li·ªáu`
            : (ragInfo.sources.length === 1 ? "1 ngu·ªìn t√†i li·ªáu" : "t√†i li·ªáu gi√°o khoa");
          
          const ragNotice = `
            <div class="rag-highlight" style="margin-bottom: 20px; padding: 10px; background-color: rgba(76, 175, 80, 0.1); border-left: 4px solid #4CAF50; border-radius: 4px;">
              <p><strong>üìö N·ªôi dung d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·ª´ s√°ch gi√°o khoa</strong></p>
              <p>Th√¥ng tin ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ ${sourcesText}.</p>
            </div>
          `;
          
          // Ch√®n th√¥ng b√°o RAG sau ti√™u ƒë·ªÅ h3 ho·∫∑c ·ªü ƒë·∫ßu n·ªôi dung
          if (formattedContent.includes('</h3>')) {
            const h3EndIndex = formattedContent.indexOf('</h3>') + 5;
            const before = formattedContent.substring(0, h3EndIndex);
            const after = formattedContent.substring(h3EndIndex);
            formattedContent = before + ragNotice + after;
            console.log("‚úÖ ƒê√£ ch√®n th√¥ng b√°o RAG sau ti√™u ƒë·ªÅ h3");
          } else {
            formattedContent = ragNotice + formattedContent;
            console.log("‚úÖ ƒê√£ ch√®n th√¥ng b√°o RAG ·ªü ƒë·∫ßu n·ªôi dung");
          }
          
          // ƒê√°nh d·∫•u c√°c ƒëo·∫°n vƒÉn ƒë·∫ßu ti√™n
          const paragraphs = [];
          const paragraphRegex = /<p[^>]*>((?!class="rag-highlight")[^<]*)<\/p>/g;
          let match;
          
          // Reset regex v√† thu th·∫≠p c√°c ƒëo·∫°n vƒÉn
          paragraphRegex.lastIndex = 0;
          while ((match = paragraphRegex.exec(formattedContent)) !== null) {
            if (match[1] && match[1].trim().length > 30) {
              paragraphs.push({
                index: match.index,
                fullMatch: match[0],
                content: match[1]
              });
            }
          }
          
          console.log(`üîç T√¨m th·∫•y ${paragraphs.length} ƒëo·∫°n vƒÉn ƒë·ªÉ ƒë√°nh d·∫•u`);
          
          // ƒê√°nh d·∫•u 2 ƒëo·∫°n vƒÉn ƒë·∫ßu ti√™n
          let markedCount = 0;
          for (let i = 0; i < Math.min(2, paragraphs.length); i++) {
            const para = paragraphs[i];
            const originalHTML = para.fullMatch;
            const highlightedHTML = `<p class="rag-highlight">${para.content}</p>`;
            
            const startIndex = formattedContent.indexOf(originalHTML);
            if (startIndex !== -1) {
              const before = formattedContent.substring(0, startIndex);
              const after = formattedContent.substring(startIndex + originalHTML.length);
              formattedContent = before + highlightedHTML + after;
              markedCount++;
            }
          }
          
          console.log(`‚úÖ ƒê√°nh d·∫•u ${markedCount} ƒëo·∫°n vƒÉn th√†nh c√¥ng`);
          
        } catch (error) {
          console.error('‚ùå L·ªói khi ƒë√°nh d·∫•u n·ªôi dung:', error);
          
          formattedContent += `
            <div class="content-source-summary">
              <p><span class="content-source-icon">üìö</span> <em>Th√¥ng tin ƒë∆∞·ª£c tham kh·∫£o t·ª´ t√†i li·ªáu gi√°o d·ª•c</em></p>
            </div>
          `;
        }
      } else {
        console.log('‚ÑπÔ∏è Kh√¥ng ƒë√°nh d·∫•u n·ªôi dung v√¨ kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán highlight (badgeType ‚â† success)');
      }
    }
    
    // C·∫≠p nh·∫≠t n·ªôi dung v·ªõi ƒë·ªãnh d·∫°ng m·ªõi
    contentElement.innerHTML = formattedContent;
    
    // Th√™m debugging chi ti·∫øt
    console.log('üìä DEBUG - RAG Info:', {
      usedRAG: ragInfo?.usedRAG,
      attempted: ragInfo?.attempted,
      sources: ragInfo?.sources?.length || 0,
      badgeType: this.currentBadgeType,
      badgeHTML: badgeHtml ? 'c√≥' : 'kh√¥ng',
      h3Match: h3Match ? 'c√≥' : 'kh√¥ng'
    });

    // Ki·ªÉm tra hi·ªÉn th·ªã sau khi ƒë√£ render
    setTimeout(() => {
      const highlightedElements = contentElement.querySelectorAll('.rag-highlight, .content-rag, .content-mixed');
      console.log(`üîç S·ªë ph·∫ßn t·ª≠ ƒë∆∞·ª£c ƒë√°nh d·∫•u: ${highlightedElements.length}`);
      
      const badge = contentElement.querySelector('.rag-badge');
      console.log(`üè∑Ô∏è Badge: ${badge ? 'C√≥' : 'Kh√¥ng'}`);
      
      // ƒê·∫£m b·∫£o hi·ªÉn th·ªã ƒë√∫ng khi c√≥ k·∫øt qu·∫£ RAG
      if (ragInfo?.usedRAG === true) {
        // Ki·ªÉm tra nhanh t√¨nh tr·∫°ng hi·ªÉn th·ªã
        const badgeExists = !!badge;
        const badgeTypeCorrect = this.currentBadgeType === 'success';
        const badgeClassCorrect = badge && badge.className.includes('rag-success');
        
        console.log(`üîç Ki·ªÉm tra hi·ªÉn th·ªã RAG: badgeExists=${badgeExists}, badgeType=${this.currentBadgeType}, highlightCount=${highlightedElements.length}, sources=${ragInfo.sources?.length || 0}`);
        
        // S·ª≠a l·ªói hi·ªÉn th·ªã n·∫øu c·∫ßn
        if (!badgeExists || !badgeTypeCorrect || !badgeClassCorrect || highlightedElements.length === 0) {
          console.warn(`‚ö†Ô∏è C·∫ßn kh·∫Øc ph·ª•c hi·ªÉn th·ªã: usedRAG = true, badgeExists = ${badgeExists}, badgeType = ${this.currentBadgeType}, highlightElements = ${highlightedElements.length}`);
          
          // ƒê·∫£m b·∫£o badge type ƒë√∫ng
          this.currentBadgeType = 'success';
          
          // Th√™m badge n·∫øu kh√¥ng c√≥ ho·∫∑c kh√¥ng ƒë√∫ng
          if (!badgeExists || !badgeClassCorrect) {
            if (badge) badge.remove();
            
            console.log('üîÑ Th√™m badge success kh·∫©n c·∫•p');
            const sourcesCount = ragInfo.sources?.length || 0;
            const emergencyBadge = `<div class="rag-badge rag-success" style="display:inline-block;margin:10px 0;padding:5px 10px;background:#4CAF50;color:white;border-radius:4px;">
              üìö N·ªôi dung t·ª´ RAG (${sourcesCount} ngu·ªìn)
            </div>`;
            
            contentElement.insertAdjacentHTML('afterbegin', emergencyBadge);
          }
          
          // Th√™m highlight n·∫øu kh√¥ng c√≥
          if (highlightedElements.length === 0) {
            console.log('üîÑ Th√™m highlight kh·∫©n c·∫•p');
            
            const sourcesCount = ragInfo.sources?.length || 0;
            const sourcesText = sourcesCount > 0 ? `t·ª´ ${sourcesCount} ngu·ªìn t√†i li·ªáu` : "t·ª´ t√†i li·ªáu gi√°o khoa";
            
            const emergencyHighlight = `<div class="rag-highlight" style="margin-bottom: 20px; padding: 10px; background-color: rgba(76, 175, 80, 0.1); border-left: 4px solid #4CAF50; border-radius: 4px;">
              <p><strong>üìö N·ªôi dung d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·ª´ s√°ch gi√°o khoa</strong></p>
              <p>Th√¥ng tin ƒë∆∞·ª£c tr√≠ch xu·∫•t ${sourcesText}.</p>
            </div>`;
            
            // Th√™m v√†o v·ªã tr√≠ ph√π h·ª£p
            if (contentElement.querySelector('.rag-badge')) {
              contentElement.querySelector('.rag-badge').insertAdjacentHTML('afterend', emergencyHighlight);
            } else {
              contentElement.insertAdjacentHTML('afterbegin', emergencyHighlight);
            }
          }
        } else {
          console.log('‚úÖ Badge v√† highlight ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã ƒë√∫ng');
        }
      }
    }, 100);

    // Th√™m hi·ªáu ·ª©ng ho√†n th√†nh v√† c√°c n√∫t h√†nh ƒë·ªông
    contentElement.classList.add('stream-complete');
    setTimeout(() => {
      contentElement.classList.remove('stream-complete');
      contentElement.classList.remove('streaming-content');
      
      // TH√äM M·ªöI: C·∫£nh b√°o v·ªÅ n·ªôi dung AI
      const disclaimerElement = document.createElement('div');
      disclaimerElement.className = 'ai-disclaimer';
      disclaimerElement.innerHTML = `
        <div style="margin: 25px 0 15px; padding: 10px 15px; background-color: rgba(255, 193, 7, 0.1); 
                    border-left: 4px solid #FFC107; border-radius: 4px; font-size: 0.9em; color: #555;">
          <p><strong>‚ö†Ô∏è L∆∞u √Ω:</strong> H·ªá th·ªëng ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi OpenAI c√≥ th·ªÉ m·∫Øc l·ªói. H√£y ki·ªÉm tra c√°c th√¥ng tin quan tr·ªçng.</p>
        </div>
      `;
      contentElement.appendChild(disclaimerElement);

      // Th√™m n√∫t h√†nh ƒë·ªông (ph·∫ßn n√†y gi·ªØ nguy√™n)
      if (this.uiMode === 'modern') {
        if (!contentElement.querySelector('.action-buttons-container')) {
          const actionsContainer = document.createElement('div');
          actionsContainer.className = 'action-buttons-container';
          actionsContainer.innerHTML = `
            <button class="action-button export-word-btn" title="Xu·∫•t Word">
              <i class="fas fa-file-word"></i> Xu·∫•t Word
            </button>
            <button class="action-button export-pdf-btn" title="Xu·∫•t PDF">
              <i class="fas fa-file-pdf"></i> Xu·∫•t PDF
            </button>
          `;
          
          contentElement.appendChild(actionsContainer);
          
          const exportWordBtn = actionsContainer.querySelector('.export-word-btn');
          if (exportWordBtn) {
            exportWordBtn.addEventListener('click', () => {
              this.exportToWord(contentElement, fullContent);
            });
          }
          
          const exportPdfBtn = actionsContainer.querySelector('.export-pdf-btn');
          if (exportPdfBtn) {
            exportPdfBtn.addEventListener('click', () => {
              this.exportToPdf(contentElement);
            });
          }
          
          const chatBtn = actionsContainer.querySelector('.chat-btn');
          if (chatBtn) {
            chatBtn.addEventListener('click', () => {
              const followUpChat = document.getElementById('follow-up-chat');
              if (followUpChat) {
                followUpChat.style.display = 'block';
                const chatInput = followUpChat.querySelector('#chat-input');
                if (chatInput) chatInput.focus();
                
                const chatCount = followUpChat.querySelector('#chat-count');
                if (chatCount) {
                  const maxQuestions = 5;
                  chatCount.textContent = maxQuestions;
                }
              }
            });
          }
        }
      }
      // Th√™m form feedback
      const h3Element = contentElement.closest('.grammar-card')?.querySelector('h3');
      const topic = h3Element ? h3Element.textContent.replace(/^[^a-zA-Z0-9\u00C0-\u1EF9]+\s*/, '') : '';
      const tabType = h3Element ? h3Element.getAttribute('data-action') || '' : '';

      // Th√™m form feedback
      this.addFeedbackForm(contentElement, topic, tabType);

    }, 500);
    
    // Thay th·∫ø b·∫±ng ph∆∞∆°ng ph√°p hi·ªÉn th·ªã ƒë∆°n gi·∫£n v√† nhanh h∆°n
    if (ragInfo && ragInfo.sources && ragInfo.sources.length > 0) {
      // Hi·ªÉn th·ªã ngu·ªìn ƒë∆°n gi·∫£n, kh√¥ng ph√¢n t√≠ch ph·ª©c t·∫°p
      const simpleSourceContainer = document.createElement('div');
      simpleSourceContainer.className = 'rag-sources-simple';
      simpleSourceContainer.innerHTML = `
        <h4>üîç Ngu·ªìn tham kh·∫£o:</h4>
        <ul class="simple-source-list">
          ${Array.from(new Set(ragInfo.sources.map(source => {
            const parts = source.split(' - ');
            return parts.length > 1 ? parts[1] : source;
          }))).map(source => `<li>${source}</li>`).join('')}
        </ul>
      `;
      contentElement.appendChild(simpleSourceContainer);
    }
}

  // Ph∆∞∆°ng th·ª©c ki·ªÉm tra v√† t·∫°o c√°c ph·∫ßn t·ª≠ DOM c·∫ßn thi·∫øt
  ensureDOMElements() {
    if (!this.outputArea) {
      console.error('Kh√¥ng t√¨m th·∫•y khu v·ª±c output. Ki·ªÉm tra ID:', this.outputAreaId);
      return false;
    }
    
    // Ki·ªÉm tra xem container c√≥ class ph√π h·ª£p v·ªõi ch·∫ø ƒë·ªô giao di·ªán kh√¥ng
    const container = document.querySelector('.bibi-grammar-app');
    if (container) {
      if (this.uiMode === 'modern') {
        container.classList.remove('classic-ui');
      } else {
        container.classList.add('classic-ui');
      }
    }
    
    return true;
  }

  // Th√™m ph∆∞∆°ng th·ª©c m·ªõi x·ª≠ l√Ω ƒëa ng√¥n ng·ªØ
  applyLanguageFormatting(content, language = 'vi') {
    if (!content) return '';
    
    switch(language) {
      case 'en':
        // N·∫øu ng√¥n ng·ªØ l√† ti·∫øng Anh, x√≥a n·ªôi dung ti·∫øng Vi·ªát n·∫øu c√≥
        // Gi·∫£ ƒë·ªãnh n·ªôi dung ti·∫øng Anh th∆∞·ªùng n·∫±m trong ngo·∫∑c
        return content.replace(/([^(]+)\s*\(([^)]+)\)/g, '$2')
                    .replace(/\(\)/g, ''); // X√≥a c·∫∑p ngo·∫∑c r·ªóng
        
      case 'both':
        // ƒê·ªãnh d·∫°ng song ng·ªØ v·ªõi ph√¢n c√°ch tr·ª±c quan
        return content.replace(/([^(]+)\s*\(([^)]+)\)/g, 
                            '<div class="bilingual-item"><div class="vi-content">$1</div><div class="en-content">$2</div></div>');
        
      case 'vi':
      default:
        // M·∫∑c ƒë·ªãnh gi·ªØ ti·∫øng Vi·ªát, x√≥a ph·∫ßn ti·∫øng Anh trong ngo·∫∑c
        return content.replace(/([^(]+)\s*\([^)]+\)/g, '$1')
                    .replace(/\(\)/g, '');
    }
  }

  // Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t khi chuy·ªÉn ƒë·ªïi ng√¥n ng·ªØ
  updateLanguage(language) {
    document.querySelectorAll('.grammar-content').forEach(contentEl => {
      // L·∫•y n·ªôi dung g·ªëc t·ª´ data attribute n·∫øu c√≥
      const originalContent = contentEl.getAttribute('data-original-content');
      if (originalContent) {
        // ƒê·ªãnh d·∫°ng l·∫°i v·ªõi ng√¥n ng·ªØ m·ªõi
        contentEl.innerHTML = this.formatContent(originalContent, { language });
      }
    });
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c n√∫t ng√¥n ng·ªØ
    document.querySelectorAll('.lang-btn').forEach(btn => {
      btn.classList.toggle('active', btn.id.endsWith(language));
    });
  }

  // Ph∆∞∆°ng th·ª©c xu·∫•t PDF
  exportToPdf(contentElement) {
    try {
      // Chu·∫©n b·ªã trang cho vi·ªác in
      const currentTitle = document.title;
      const originalContent = document.body.innerHTML;
      
      // T·∫°o m·ªôt div ·∫©n ƒë·ªÉ ch·ª©a n·ªôi dung c·∫ßn in
      const printDiv = document.createElement('div');
      printDiv.className = 'print-container';
      
      // Th√™m header cho b·∫£n in
      const header = document.createElement('div');
      header.className = 'print-header';
      header.innerHTML = `
        <div class="print-logo">ü§ñ BiBi - Tr·ª£ l√Ω AI Gi√°o d·ª•c K12</div>
        <div class="print-date">Ng√†y t·∫°o: ${new Date().toLocaleDateString('vi-VN')}</div>
      `;
      printDiv.appendChild(header);
      
      // Th√™m n·ªôi dung ch√≠nh
      const mainContent = document.createElement('div');
      mainContent.className = 'print-content';
      // Sao ch√©p n·ªôi dung t·ª´ contentElement
      mainContent.innerHTML = contentElement.innerHTML;
      // Lo·∫°i b·ªè c√°c n√∫t kh√¥ng c·∫ßn thi·∫øt khi in
      mainContent.querySelectorAll('.action-buttons-container').forEach(el => el.remove());
      printDiv.appendChild(mainContent);
      
      // Th√™m footer
      const footer = document.createElement('div');
      footer.className = 'print-footer';
      footer.innerHTML = `<div>T·∫°o b·ªüi BiBi - Tr·ª£ l√Ω AI Gi√°o d·ª•c K12</div>`;
      printDiv.appendChild(footer);
      
      // Th√™m th·∫ª style ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng khi in
      const style = document.createElement('style');
      style.innerHTML = `
        @media print {
          body * {
            visibility: hidden;
          }
          .print-container, .print-container * {
            visibility: visible;
          }
          .print-container {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
          }
        }
      `;
      document.head.appendChild(style);
      
      // Th√™m div in ·∫•n v√†o body
      document.body.appendChild(printDiv);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng
      const exportBtn = contentElement.querySelector('.export-pdf-btn');
      if (exportBtn) {
        exportBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang chu·∫©n b·ªã...';
      }
      
      // ƒê·∫∑t ti√™u ƒë·ªÅ trang ƒë·ªÉ hi·ªÉn th·ªã khi l∆∞u PDF
      const h3Element = contentElement.querySelector('h3');
      if (h3Element) {
        document.title = h3Element.textContent.trim();
      }
      
      // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ CSS ƒë∆∞·ª£c √°p d·ª•ng
      setTimeout(() => {
        // In trang
        window.print();
        
        // Kh√¥i ph·ª•c l·∫°i tr·∫°ng th√°i ban ƒë·∫ßu
        document.body.removeChild(printDiv);
        document.head.removeChild(style);
        document.title = currentTitle;
        
        if (exportBtn) {
          exportBtn.innerHTML = '<i class="fas fa-file-pdf"></i> Xu·∫•t PDF';
        }
      }, 300);
    } catch (error) {
      console.error('L·ªói khi xu·∫•t PDF:', error);
      alert('C√≥ l·ªói khi xu·∫•t PDF. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }

  // Ph∆∞∆°ng th·ª©c xu·∫•t Word
  exportToWord(contentElement, rawContent) {
    try {
      // Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng
      const exportBtn = contentElement.querySelector('.export-word-btn');
      if (exportBtn) {
        exportBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang chu·∫©n b·ªã...';
      }
      
      // L·∫•y ti√™u ƒë·ªÅ t·ª´ ph·∫ßn t·ª≠ h3 ƒë·∫ßu ti√™n ho·∫∑c d√πng ti√™u ƒë·ªÅ m·∫∑c ƒë·ªãnh
      const h3Element = contentElement.querySelector('h3');
      const title = h3Element ? h3Element.textContent.trim() : 'BiBi - T√†i li·ªáu ng·ªØ ph√°p';
      
      // Ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n: t·∫°o blob t·ª´ HTML
      const template = `
        <html xmlns:o="urn:schemas-microsoft-com:office:office" 
              xmlns:w="urn:schemas-microsoft-com:office:word" 
              xmlns="http://www.w3.org/TR/REC-html40">
        <head>
          <meta charset="utf-8">
          <title>${title}</title>
          <style>
            body { font-family: 'Times New Roman', Times, serif; }
            h1, h2, h3 { color: #2E74B5; }
            h1 { font-size: 18pt; }
            h2 { font-size: 16pt; }
            h3 { font-size: 14pt; }
            ul, ol { margin-left: 2cm; }
            li { margin-bottom: 5px; }
            .rag-sources { margin-top: 15px; border-top: 1px solid #ddd; padding-top: 10px; }
            .rag-source-item { padding-left: 10px; border-left: 2px solid #4CAF50; margin-bottom: 5px; }
          </style>
        </head>
        <body>
          <h1>${title}</h1>
          ${contentElement.innerHTML}
          <p style="text-align:center; margin-top:30px; color:#777; font-size:9pt;">
            T·∫°o b·ªüi BiBi - Tr·ª£ l√Ω AI Gi√°o d·ª•c K12
          </p>
        </body>
        </html>
      `;
      
      // T·∫°o blob v√† t·∫°o link t·∫£i xu·ªëng
      const blob = new Blob([template], {type: 'application/msword'});
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = `${title}.doc`;
      
      // Th√™m v√†o body, click v√† x√≥a
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Kh√¥i ph·ª•c n√∫t
      if (exportBtn) {
        setTimeout(() => {
          exportBtn.innerHTML = '<i class="fas fa-file-word"></i> Xu·∫•t Word';
        }, 1000);
      }
    } catch (error) {
      console.error('L·ªói khi xu·∫•t Word:', error);
      alert('C√≥ l·ªói khi xu·∫•t Word. Vui l√≤ng th·ª≠ l·∫°i sau.');
      
      // Kh√¥i ph·ª•c n√∫t n·∫øu c√≥ l·ªói
      const exportBtn = contentElement.querySelector('.export-word-btn');
      if (exportBtn) {
        exportBtn.innerHTML = '<i class="fas fa-file-word"></i> Xu·∫•t Word';
      }
    }
  }
  
  // Ph∆∞∆°ng th·ª©c ki·ªÉm tra xem n·ªôi dung c√≥ ph·∫ßn ƒë√°ng k·ªÉ t·ª´ AI kh√¥ng
  hasSignificantAIContent(content, ragInfo) {
    if (!content || !ragInfo || !ragInfo.sources) return false;
    
    // T√≠nh t·ª∑ l·ªá n·ªôi dung RAG
    let ragContentRatio = 0;
    
    // Duy·ªát qua c√°c ngu·ªìn RAG
    ragInfo.sources.forEach(source => {
      // Tr√≠ch xu·∫•t n·ªôi dung t·ª´ ngu·ªìn (lo·∫°i b·ªè ph·∫ßn "Ngu·ªìn:" v√† "ƒê·ªô li√™n quan:")
      const sourceContent = source.replace(/\([^)]*\)/g, '').trim();
      
      // Ki·ªÉm tra xem n·ªôi dung ngu·ªìn c√≥ xu·∫•t hi·ªán trong n·ªôi dung ƒë·∫ßy ƒë·ªß kh√¥ng
      if (sourceContent && sourceContent.length > 20) {
        // T√≠nh t·ª∑ l·ªá d·ª±a tr√™n ƒë·ªô d√†i
        const matchRatio = this.calculateContentMatchRatio(content, sourceContent);
        ragContentRatio += matchRatio;
      }
    });
    
    // N·∫øu t·ª∑ l·ªá d∆∞·ªõi 50%, coi l√† c√≥ ph·∫ßn ƒë√°ng k·ªÉ t·ª´ AI
    return ragContentRatio < 0.5;
  }

  // T√≠nh t·ª∑ l·ªá tr√πng kh·ªõp gi·ªØa n·ªôi dung v√† ngu·ªìn
  calculateContentMatchRatio(fullContent, sourceContent) {
    // Chuy·ªÉn ƒë·ªïi th√†nh vƒÉn b·∫£n thu·∫ßn t√∫y ƒë·ªÉ so s√°nh
    const plainFullContent = fullContent.replace(/\s+/g, ' ').toLowerCase();
    const plainSourceContent = sourceContent.replace(/\s+/g, ' ').toLowerCase();
    
    // ƒê·∫øm s·ªë t·ª´ ngu·ªìn xu·∫•t hi·ªán trong n·ªôi dung ƒë·∫ßy ƒë·ªß
    let matchedWords = 0;
    const sourceWords = plainSourceContent.split(' ');
    
    sourceWords.forEach(word => {
      if (word.length > 3 && plainFullContent.includes(word)) {
        matchedWords++;
      }
    });
    
    return matchedWords / sourceWords.length;
  }

  // Ph∆∞∆°ng th·ª©c ƒë√°nh d·∫•u n·ªôi dung d·ª±a tr√™n ngu·ªìn
  markContentBySource(formattedContent, originalContent, ragInfo, badgeType) {
    // N·∫øu kh√¥ng c√≥ th√¥ng tin RAG, tr·∫£ v·ªÅ nguy√™n b·∫£n
    if (!ragInfo || !ragInfo.sources || ragInfo.sources.length === 0) {
      return formattedContent;
    }
    
    const paragraphRegex = /<p[^>]*>(.*?)<\/p>/g;
    let markedContent = formattedContent;
    let paragraphs = [];
    let match;
    
    // Thu th·∫≠p t·∫•t c·∫£ c√°c ƒëo·∫°n vƒÉn
    while ((match = paragraphRegex.exec(formattedContent)) !== null) {
      paragraphs.push({
        fullMatch: match[0],
        content: match[1],
        isRAG: false
      });
    }
    
    // Duy·ªát qua t·ª´ng ngu·ªìn RAG
    ragInfo.sources.forEach(source => {
      // Tr√≠ch xu·∫•t n·ªôi dung t·ª´ ngu·ªìn
      const sourceContent = source.replace(/\([^)]*\)/g, '').trim();
      
      if (sourceContent && sourceContent.length > 20) {
        // Ki·ªÉm tra t·ª´ng ƒëo·∫°n vƒÉn
        paragraphs.forEach((para, index) => {
          if (!para.isRAG) {
            // Ki·ªÉm tra ƒë∆°n gi·∫£n: n·∫øu ƒëo·∫°n vƒÉn ch·ª©a m·ªôt ph·∫ßn ƒë√°ng k·ªÉ c·ªßa ngu·ªìn
            const paraText = para.content.replace(/<[^>]*>/g, '');
            
            if (this.hasSignificantOverlap(paraText, sourceContent)) {
              paragraphs[index].isRAG = true;
            }
          }
        });
      }
    });
    
    // Thay th·∫ø c√°c ƒëo·∫°n vƒÉn v·ªõi l·ªõp ph√π h·ª£p
    paragraphs.forEach(para => {
      const sourceClass = para.isRAG ? 
        (badgeType === 'mixed' ? 'content-mixed' : 'content-rag') : 
        'content-ai';
      
      const sourceIcon = para.isRAG ? 
        '<span class="content-source-icon">üìö</span>' : 
        '<span class="content-source-icon">ü§ñ</span>';
      
      const newPara = para.fullMatch.replace(
        /<p[^>]*>(.*?)<\/p>/,
        `<p class="${sourceClass}">${sourceIcon}$1</p>`
      );
      
      markedContent = markedContent.replace(para.fullMatch, newPara);
    });
    
    // Th√™m ph·∫ßn t√≥m t·∫Øt ngu·ªìn v√†o cu·ªëi
    const ragCount = paragraphs.filter(p => p.isRAG).length;
    const aiCount = paragraphs.length - ragCount;
    const totalCount = paragraphs.length;
    
    const ragPercent = Math.round((ragCount / totalCount) * 100);
    const aiPercent = 100 - ragPercent;
    
    // Th√™m t√≥m t·∫Øt ngu·ªìn
    const sourceSummary = `
      <div class="content-source-summary">
        <h4>üìä T√≥m t·∫Øt ngu·ªìn n·ªôi dung:</h4>
        <div class="progress-bar">
          <div class="progress-fill-rag" style="width: ${ragPercent}%"></div>
          <div class="progress-fill-ai" style="width: ${aiPercent}%"></div>
        </div>
        <div class="source-percentages">
          <span><span class="content-source-icon">üìö</span> S√°ch gi√°o khoa: ${ragPercent}%</span> |
          <span><span class="content-source-icon">ü§ñ</span> AI: ${aiPercent}%</span>
        </div>
      </div>
    `;
    
    return markedContent + sourceSummary;
  }

  // Ki·ªÉm tra n·∫øu c√≥ s·ª± tr√πng l·∫∑p ƒë√°ng k·ªÉ gi·ªØa hai ƒëo·∫°n vƒÉn b·∫£n
  hasSignificantOverlap(text1, text2) {
    // Chuy·ªÉn ƒë·ªïi th√†nh vƒÉn b·∫£n thu·∫ßn t√∫y v√† t√°ch th√†nh t·ª´
    const words1 = text1.toLowerCase().replace(/\s+/g, ' ').split(' ');
    const words2 = text2.toLowerCase().replace(/\s+/g, ' ').split(' ');
    
    // ƒê·∫øm s·ªë t·ª´ tr√πng l·∫∑p
    let matchCount = 0;
    const minLength = 4; // Ch·ªâ ƒë·∫øm t·ª´ c√≥ ƒë·ªô d√†i t·ªëi thi·ªÉu ƒë·ªÉ tr√°nh t·ª´ ph·ªï bi·∫øn
    
    words1.forEach(word => {
      if (word.length >= minLength && words2.includes(word)) {
        matchCount++;
      }
    });
    
    // T√≠nh t·ª∑ l·ªá tr√πng l·∫∑p
    const overlapRatio = matchCount / Math.min(words1.length, words2.length);
    
    // Tr·∫£ v·ªÅ true n·∫øu t·ª∑ l·ªá tr√πng l·∫∑p > 30%
    return overlapRatio > 0.3;
  }

  // Ph∆∞∆°ng th·ª©c ƒë·ªÉ hi·ªÉn th·ªã form feedback
  addFeedbackForm(contentElement, topic, tabType) {
    if (!contentElement) return;
    
    // Ki·ªÉm tra xem ƒë√£ c√≥ form feedback ch∆∞a
    if (contentElement.querySelector('.feedback-container')) {
      return;
    }
    
    // T·∫°o container cho feedback
    const feedbackSection = document.createElement('div');
    feedbackSection.className = 'feedback-section';
    
    // Th√™m v√†o cu·ªëi n·ªôi dung
    contentElement.appendChild(feedbackSection);
    
    // Kh·ªüi t·∫°o v√† hi·ªÉn th·ªã form feedback
    if (window.feedbackManager) {
      window.feedbackManager.init(topic, tabType).renderFeedbackForm(feedbackSection);
    } else {
      console.warn('FeedbackManager kh√¥ng t·ªìn t·∫°i');
    }
  }
}