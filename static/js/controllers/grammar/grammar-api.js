// Module giao ti·∫øp v·ªõi API
import { GrammarRAG } from './grammar-rag.js';

export class GrammarAPI {
    constructor() {
      this.apiEndpoint = "/api/chat";
      // Kh·ªüi t·∫°o RAG service
      this.ragService = new GrammarRAG({
        debug: true, // B·∫≠t debug trong qu√° tr√¨nh ph√°t tri·ªÉn
        enabled: true // M·∫∑c ƒë·ªãnh b·∫≠t RAG
      });
    }
    
    // Ki·ªÉm tra tr·∫°ng th√°i RAG
    isRAGAvailable() {
      return this.ragService.isRAGAvailable();
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i RAG
    async updateRAGStatus() {
      return await this.ragService.checkConnection();
    }

    // SAU: S·ª≠a l·∫°i ho√†n to√†n ph∆∞∆°ng th·ª©c streamBiBiResponse
    async streamBiBiResponse(messages, onChunk, options = {}) {
      const perfMetrics = {
        startTime: Date.now(),
        ragStartTime: 0,
        ragEndTime: 0,
        openaiStartTime: 0,
        openaiEndTime: 0,
        totalTime: 0
      };
      
      // Th√™m ƒëi·ªÉm ƒë√°nh d·∫•u trong qu√° tr√¨nh x·ª≠ l√Ω
      perfMetrics.ragStartTime = Date.now();
      // Tr∆∞·ªõc khi g·ªçi RAG search
      
      perfMetrics.ragEndTime = Date.now();
      // Sau khi c√≥ k·∫øt qu·∫£ RAG
      
      perfMetrics.openaiStartTime = Date.now();
      // Tr∆∞·ªõc khi g·ªçi OpenAI API
      
      perfMetrics.openaiEndTime = Date.now();
      // Sau khi ho√†n th√†nh streaming
      
      perfMetrics.totalTime = Date.now() - perfMetrics.startTime;
      console.log('üìä Performance metrics:', {
          total: `${perfMetrics.totalTime}ms`,
          rag: `${perfMetrics.ragEndTime - perfMetrics.ragStartTime}ms`,
          openai: `${perfMetrics.openaiEndTime - perfMetrics.openaiStartTime}ms`
      });
        
      // C√°c bi·∫øn ƒë·ªÉ theo d√µi k·∫øt qu·∫£
      let fullResponse = '';
      let ragResults = null;
      let startTime = Date.now();
      let ragPromise = null; // Th√™m bi·∫øn ƒë·ªÉ theo d√µi promise RAG
      
      // ƒê·∫£m b·∫£o ragInfo lu√¥n c√≥ c·∫•u tr√∫c chu·∫©n
      const ragInfo = {
        usedRAG: false,
        attempted: this.ragService.isAvailable,
        searching: options.useRAG !== false && this.ragService.isAvailable, // Th√™m tr·∫°ng th√°i ƒëang t√¨m ki·∫øm
        startTime: Date.now(), // Th√™m th·ªùi gian b·∫Øt ƒë·∫ßu t√¨m ki·∫øm
        error: null,
        sources: [],
        namespaces: []
      };

      // Th√¥ng b√°o tr·∫°ng th√°i t√¨m ki·∫øm ban ƒë·∫ßu cho UI
      if (options.useRAG !== false && this.ragService.isAvailable) {
        // G·ª≠i th√¥ng b√°o ƒëang t√¨m ki·∫øm ngay t·ª´ ƒë·∫ßu
        setTimeout(() => onChunk('', fullResponse, ragInfo), 100);
      }
      
      try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω y√™u c·∫ßu v·ªõi RAG:', options.useRAG !== false && this.ragService.isAvailable);
        
        // B∆Ø·ªöC 1: B·∫Øt ƒë·∫ßu t√¨m ki·∫øm RAG b·∫•t ƒë·ªìng b·ªô (kh√¥ng ƒë·ª£i k·∫øt qu·∫£)
        if (options.useRAG !== false && this.ragService.isAvailable && messages.length > 0) {
          const lastUserMessageIndex = messages.map(m => m.role).lastIndexOf('user');
          
          if (lastUserMessageIndex !== -1) {
            const userMessage = messages[lastUserMessageIndex];
            let queryForRag = options.ragQuery || userMessage.content;
            
            // X·ª≠ l√Ω truy v·∫•n cho t·∫•t c·∫£ c√°c tab
            if (queryForRag.includes('_tab')) {
              // Tr√≠ch xu·∫•t ch·ªß ƒë·ªÅ t·ª´ truy v·∫•n tab
              const tabParts = queryForRag.split('_tab ');
              const actualQuery = tabParts[1] || '';
              
              // Th√™m t·ª´ kh√≥a b·ªï sung d·ª±a tr√™n lo·∫°i tab
              let enhancedQuery = actualQuery;
              if (queryForRag.includes('examples_tab')) {
                enhancedQuery = `v√≠ d·ª• ${actualQuery}`;
              } else if (queryForRag.includes('exercises_tab')) {
                enhancedQuery = `b√†i t·∫≠p ${actualQuery}`;
              } else if (queryForRag.includes('mistakes_tab')) {
                enhancedQuery = `l·ªói th∆∞·ªùng g·∫∑p ${actualQuery}`;
              }
              
              console.log('üîç T√¨m ki·∫øm RAG cho tab v·ªõi truy v·∫•n n√¢ng cao:', enhancedQuery);
              queryForRag = enhancedQuery; // S·ª≠ d·ª•ng truy v·∫•n ƒë√£ n√¢ng cao
            }
            
            console.log('üîç B·∫Øt ƒë·∫ßu t√¨m ki·∫øm RAG b·∫•t ƒë·ªìng b·ªô cho:', queryForRag);
            
            // B·∫Øt ƒë·∫ßu t√¨m ki·∫øm RAG trong background (kh√¥ng ƒë·ª£i k·∫øt qu·∫£)
            const searchOptions = {
              maxResults: 3,
              timeout: 20000, // TƒÉng timeout t·ª´ 8s l√™n 15s
              namespaces: ["bibi_sgk", "bibi_ctgd"], // T√¨m ki·∫øm tr√™n nhi·ªÅu namespace
              skipCache: options.skipCache || false
            };

            // L∆∞u promise ƒë·ªÉ x·ª≠ l√Ω sau, KH√îNG ƒë·ª£i
            ragPromise = this.ragService.search(queryForRag, searchOptions);

            // TH√äM M·ªöI: X·ª≠ l√Ω k·∫øt qu·∫£ RAG s·ªõm v·ªõi .then()
            ragPromise.then(results => {
              if (results && results.success && results.results && results.results.length > 0) {
                console.log(`‚úÖ RAG early notify: T√¨m th·∫•y ${results.results.length} k·∫øt qu·∫£ t·ª´ ${results.successNamespaces.length} namespaces`);
                
                // C·∫≠p nh·∫≠t ragInfo v·ªõi k·∫øt qu·∫£ v√† ƒë√°nh d·∫•u ƒë√£ ho√†n t·∫•t t√¨m ki·∫øm
                ragInfo.searching = false;
                ragInfo.endTime = Date.now();
                ragInfo.usedRAG = true;
                ragInfo.sources = results.results.map(result => {
                  const namespace = result.namespace || 'unknown';
                  const sourceName = this.ragService.getNamespaceDisplayName(namespace);
                  const source = result.metadata?.source || 'T√†i li·ªáu';
                  return `${sourceName} - ${source}`;
                });
                ragInfo.namespaces = [...new Set(results.results.map(r => r.namespace))];
                
                // Th√¥ng b√°o cho UI c·∫≠p nh·∫≠t hi·ªÉn th·ªã ngu·ªìn NGAY L·∫¨P T·ª®C
                onChunk('', fullResponse, ragInfo);
              }
            }).catch(err => {
              console.warn("‚ö†Ô∏è RAG early notify failed:", err);
              ragInfo.error = err.message;
              ragInfo.searching = false;
              ragInfo.endTime = Date.now();
              
              // C·∫≠p nh·∫≠t UI v·ªõi th√¥ng tin l·ªói
              onChunk('', fullResponse, ragInfo);
            });
          }
        }
        
        // B∆Ø·ªöC 2: G·ªçi API OpenAI ngay l·∫≠p t·ª©c m√† kh√¥ng ƒë·ª£i RAG
        console.log('üöÄ G·ªçi API streaming v·ªõi model (kh√¥ng ƒë·ª£i RAG):', options.model || "gpt-4.1");
        
        // S·ª≠ d·ª•ng messages ban ƒë·∫ßu (kh√¥ng c√≥ RAG) ƒë·ªÉ b·∫Øt ƒë·∫ßu streaming ngay
        const initialMessages = [...messages];

        // T√≠nh k√≠ch th∆∞·ªõc c·ªßa messages ƒë·ªÉ theo d√µi
        const messagesSize = JSON.stringify(messages).length;
        console.log(`üìä K√≠ch th∆∞·ªõc messages: ${messagesSize/1024} KB`);

        // N·∫øu k√≠ch th∆∞·ªõc prompt qu√° l·ªõn, c·∫Øt b·ªõt context
        let optimizedMessages = [...messages];
        if (messagesSize > 100000) { // N·∫øu l·ªõn h∆°n ~100KB
            console.log(`‚ö†Ô∏è Messages qu√° l·ªõn (${messagesSize/1024}KB), t·ªëi ∆∞u h√≥a...`);
            
            // T√¨m v√† t·ªëi ∆∞u h√≥a user message cu·ªëi c√πng
            for (let i = optimizedMessages.length - 1; i >= 0; i--) {
                if (optimizedMessages[i].role === 'user') {
                    let content = optimizedMessages[i].content;
                    
                    // N·∫øu content ch·ª©a th√¥ng tin RAG, c·∫Øt b·ªõt
                    if (content.includes("S·ª≠ d·ª•ng c√°c th√¥ng tin sau ƒë√¢y")) {
                        // Gi·ªØ t·ªëi ƒëa 2000 k√Ω t·ª± th√¥ng tin RAG
                        const parts = content.split("C√¢u h·ªèi g·ªëc:");
                        if (parts.length === 2) {
                            const context = parts[0].substring(0, 2000) + "...\n\n";
                            const question = parts[1];
                            optimizedMessages[i].content = context + "C√¢u h·ªèi: " + question;
                            console.log(`‚úÇÔ∏è ƒê√£ c·∫Øt ng·∫Øn context RAG t·ª´ ${content.length} xu·ªëng ${optimizedMessages[i].content.length} k√Ω t·ª±`);
                        }
                    }
                    break;
                }
            }
        }

        const response = await fetch(this.apiEndpoint, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ 
            messages: optimizedMessages, // S·ª≠ d·ª•ng messages ƒë√£ t·ªëi ∆∞u
            model: options.model || "gpt-4.1",
            temperature: options.temperature || 0.7,
            max_tokens: options.maxTokens || 2000,
            stream: true
          })
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error?.message || "L·ªói API");
        }
        
        // B∆Ø·ªöC 3: X·ª≠ l√Ω streaming response
        const reader = response.body.getReader();
        const decoder = new TextDecoder("utf-8");
        let buffer = '';
        
        while (true) {
          const { done, value } = await reader.read();
          if (done) break;
          
          buffer += decoder.decode(value, { stream: true });
          
          const lines = buffer.split('\n');
          buffer = lines.pop();
          
          for (const line of lines) {
            if (line.startsWith('data: ') && line !== 'data: [DONE]') {
              try {
                const jsonData = JSON.parse(line.slice(6));
                const content = jsonData.choices[0]?.delta?.content || '';
                if (content) {
                  fullResponse += content;
                  onChunk(content, fullResponse);
                }
              } catch (e) {
                console.error("Error parsing JSON:", e);
              }
            }
          }
        }
        
        // B∆Ø·ªöC 4: B√°o c√°o k·∫øt qu·∫£ v√† th·ªëng k√™
        const totalTime = (Date.now() - startTime) / 1000;
        console.log(`‚úÖ Streaming ho√†n t·∫•t sau ${totalTime.toFixed(2)}s, t·ªïng ${fullResponse.length} k√Ω t·ª±`);
        
        // B∆Ø·ªöC 5: Ki·ªÉm tra l·∫°i tr·∫°ng th√°i RAG cu·ªëi c√πng
        console.log('üìä Tr·∫°ng th√°i RAG cu·ªëi c√πng:', {
          usedRAG: ragInfo.usedRAG,
          sourcesCount: ragInfo.sources.length,
          namespacesCount: ragInfo.namespaces.length
        });
        
        // Ki·ªÉm tra xem c√≥ k·∫øt qu·∫£ RAG kh√¥ng (n·∫øu ragPromise t·ªìn t·∫°i)
        if (ragPromise) {
          try {
            // ƒê·ª£i t·ªëi ƒëa 10 gi√¢y cho k·∫øt qu·∫£ RAG (kh√¥ng l√†m ch·∫≠m tr·∫£ v·ªÅ k·∫øt qu·∫£)
            const timeoutPromise = new Promise((_, reject) => 
              setTimeout(() => reject(new Error("RAG timeout")), 50000)
            );
            
            // ƒê·ª£i k·∫øt qu·∫£ RAG ho·∫∑c timeout, c√°i n√†o ƒë·∫øn tr∆∞·ªõc
            ragResults = await Promise.race([ragPromise, timeoutPromise]);
            
            // X·ª≠ l√Ω k·∫øt qu·∫£ RAG n·∫øu nh·∫≠n ƒë∆∞·ª£c
            if (ragResults && ragResults.success && ragResults.results && ragResults.results.length > 0) {
              console.log(`‚úÖ T√¨m th·∫•y ${ragResults.results.length} k·∫øt qu·∫£ RAG t·ª´ ${ragResults.successNamespaces.length} namespaces (sau khi ƒë√£ stream)`);
              
              // C·∫≠p nh·∫≠t ragInfo v·ªõi k·∫øt qu·∫£ v√† ƒë√°nh d·∫•u ƒë√£ ho√†n t·∫•t t√¨m ki·∫øm
              ragInfo.searching = false;  // ƒê√°nh d·∫•u ƒë√£ ho√†n t·∫•t t√¨m ki·∫øm
              ragInfo.endTime = Date.now(); // L∆∞u th·ªùi ƒëi·ªÉm ho√†n t·∫•t
              ragInfo.usedRAG = true;
              ragInfo.sources = ragResults.results.map(result => {
                const namespace = result.namespace || 'unknown';
                const sourceName = this.ragService.getNamespaceDisplayName(namespace);
                const source = result.metadata?.source || 'T√†i li·ªáu';
                return `${sourceName} - ${source}`;
              });
              ragInfo.namespaces = [...new Set(ragResults.results.map(r => r.namespace))];

              console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ragInfo v·ªõi ${ragInfo.sources.length} sources t·ª´ ${ragInfo.namespaces.length} namespaces (sau streaming)`);

              // Th√¥ng b√°o cho UI c·∫≠p nh·∫≠t hi·ªÉn th·ªã ngu·ªìn
              onChunk('', fullResponse, ragInfo);
            }
          } catch (ragError) {
            console.warn('‚ö†Ô∏è L·ªói ho·∫∑c timeout khi ƒë·ª£i k·∫øt qu·∫£ RAG:', ragError);
            ragInfo.error = ragError.message;
            ragInfo.searching = false;  // ƒê√°nh d·∫•u ƒë√£ ho√†n t·∫•t t√¨m ki·∫øm d√π b·ªã l·ªói
            ragInfo.endTime = Date.now();
            // Th√¥ng b√°o cho UI c·∫≠p nh·∫≠t v·ªÅ tr·∫°ng th√°i l·ªói
            onChunk('', fullResponse, ragInfo);
          }
        }
        
        // C·∫≠p nh·∫≠t th√¥ng tin RAG v√†o k·∫øt qu·∫£ cu·ªëi c√πng
        console.log('üìä Tr·∫°ng th√°i RAG cu·ªëi c√πng:', {
          usedRAG: ragInfo.usedRAG,
          sourcesCount: ragInfo.sources.length,
          namespacesCount: ragInfo.namespaces.length
        });

        // N·∫øu v·∫´n ƒëang trong tr·∫°ng th√°i t√¨m ki·∫øm sau khi x·ª≠ l√Ω, ƒë√°nh d·∫•u l√† ƒë√£ ho√†n t·∫•t
        if (ragInfo.searching) {
          ragInfo.searching = false;
          ragInfo.endTime = Date.now();
          // Th√¥ng b√°o cho UI c·∫≠p nh·∫≠t v·ªÅ vi·ªác kh√¥ng c√≥ k·∫øt qu·∫£
          onChunk('', fullResponse, ragInfo);
          console.log('‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ RAG sau th·ªùi gian ch·ªù');
        }

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ ho√†n ch·ªânh
        return {
          content: fullResponse,
          ragInfo: ragInfo
        };
        
      } catch (error) {
        console.error("‚ùå L·ªói trong streamBiBiResponse:", error);
        throw error;
      }
    }
}