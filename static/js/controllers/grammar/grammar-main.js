// Th√™m v√†o cu·ªëi file grammar-main.js
// Bi·∫øn to√†n c·ª•c ƒë·ªÉ ki·ªÉm so√°t cache
window.bibiSkipCache = localStorage.getItem('bibi_skip_cache') === 'true';

// H√†m ƒë·ªÉ b·∫≠t/t·∫Øt cache t·ª´ console
window.toggleBiBiCache = function() {
  window.bibiSkipCache = !window.bibiSkipCache;
  localStorage.setItem('bibi_skip_cache', window.bibiSkipCache);
  console.log(`Cache ƒë√£ ƒë∆∞·ª£c ${window.bibiSkipCache ? 'T·∫ÆT' : 'B·∫¨T'}`);
  return `Cache hi·ªán ƒëang ${window.bibiSkipCache ? 'T·∫ÆT' : 'B·∫¨T'}`;
};

console.log(`ƒê·ªÉ b·∫≠t/t·∫Øt cache, m·ªü console v√† g√µ: toggleBiBiCache()`);

// Module ch√≠nh ƒëi·ªÅu ph·ªëi t·∫•t c·∫£
import { GRAMMAR_PROMPTS } from './grammar-prompts.js';
import { GrammarCache } from './grammar-cache.js';
import { GrammarUI } from './grammar-ui.js';
import { GrammarAPI } from './grammar-api.js';
// Th√™m import feedback v√†o ph·∫ßn ƒë·∫ßu file
import { FeedbackManager } from '../feedback.js';

// S·ª¨A: Thay th·∫ø import tr·ª±c ti·∫øp b·∫±ng bi·∫øn v√† import ƒë·ªông
// TR∆Ø·ªöC: import { GrammarChat } from '../static/js/controllers/grammar-chat.js';
// Khai b√°o bi·∫øn GrammarChat ƒë·ªÉ s·ª≠ d·ª•ng sau
let GrammarChat;

// Th·ª≠ t·∫£i GrammarChat t·ª´ window ho·∫∑c t·ª´ import ƒë·ªông
try {
  setTimeout(() => {
    if (window.GrammarChat) {
      GrammarChat = window.GrammarChat;
      console.log('‚úÖ ƒê√£ nh·∫≠n GrammarChat t·ª´ window');
    }
  }, 500);
} catch (e) {
  console.warn('‚ö†Ô∏è L·ªói khi ki·ªÉm tra GrammarChat:', e);
}

export class GrammarController {
  constructor() {
    // Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn
    console.log('üîß GrammarController kh·ªüi t·∫°o th√†nh c√¥ng');
    
    // X√°c ƒë·ªãnh ch·∫ø ƒë·ªô UI
    this.uiMode = window.uiModeManager ? window.uiModeManager.getCurrentMode() : 'modern';
    console.log(`üé® UI Mode: ${this.uiMode}`);
    
    // Kh·ªüi t·∫°o UI v·ªõi th√¥ng tin v·ªÅ ch·∫ø ƒë·ªô giao di·ªán
    this.ui = new GrammarUI('grammar-output', 'loading-indicator', this.uiMode);
    this.api = new GrammarAPI();
    this.selectedLanguage = 'vi';
    this.lastTopic = null; // Th√™m bi·∫øn l∆∞u tr·ªØ ch·ªß ƒë·ªÅ cu·ªëi c√πng
    
    // L·∫•y tham chi·∫øu ƒë·∫øn c√°c ph·∫ßn t·ª≠ DOM
    this.grammarTopic = document.getElementById('grammar-topic');
    this.grammarQuery = document.getElementById('grammar-query');
    this.langViBtn = document.getElementById('lang-vi');
    this.langEnBtn = document.getElementById('lang-en');
    this.langBothBtn = document.getElementById('lang-both');
    
    // Kh·ªüi t·∫°o FeedbackManager v√† g√°n v√†o window
    window.feedbackManager = new FeedbackManager();
    console.log('üîÑ FeedbackManager ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o');

    // S·ª≠a ph·∫ßn kh·ªüi t·∫°o GrammarChat
    try {
      // Th·ª≠ kh·ªüi t·∫°o ngay
      if (typeof GrammarChat !== 'undefined') {
        this.chat = new GrammarChat(this, { maxQuestions: 5 });
        console.log('üó®Ô∏è Chat feature initialized immediately');
      } else {
        // Ch·ªù m·ªôt ch√∫t v√† th·ª≠ l·∫°i (ƒë·ªÅ ph√≤ng module ƒë∆∞·ª£c t·∫£i sau)
        console.log('‚è≥ Waiting for GrammarChat module...');
        setTimeout(() => {
          if (typeof GrammarChat !== 'undefined' || window.GrammarChat) {
            const ChatClass = GrammarChat || window.GrammarChat;
            this.chat = new ChatClass(this, { maxQuestions: 5 });
            console.log('üó®Ô∏è Chat feature initialized after delay');
          } else {
            console.warn('‚ö†Ô∏è GrammarChat module not found after waiting, chat feature disabled');
          }
        }, 2000); // ƒê·ª£i 2 gi√¢y
      }
    } catch (error) {
      console.error('‚ùå Error initializing chat:', error);
    }
    
    // Kh·ªüi t·∫°o event listeners
    this.initEventListeners();

    // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i RAG
    this.checkRAGStatus();
  }

  // Th√™m ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i RAG
  async checkRAGStatus() {
    // T√¨m ph·∫ßn t·ª≠ hi·ªÉn th·ªã tr·∫°ng th√°i RAG
    const ragIndicator = document.getElementById('rag-indicator');
    if (!ragIndicator) return;
    
    const ragStatusText = ragIndicator.querySelector('.rag-status-text');
    if (!ragStatusText) return;
    
    // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang ki·ªÉm tra
    ragStatusText.textContent = 'RAG: ƒêang ki·ªÉm tra...';
    
    try {
      // Ki·ªÉm tra tr·∫°ng th√°i RAG
      const isAvailable = await this.api.updateRAGStatus();
      
      // C·∫≠p nh·∫≠t UI d·ª±a tr√™n k·∫øt qu·∫£
      if (isAvailable) {
        ragIndicator.classList.add('active');
        ragIndicator.classList.remove('inactive');
        ragStatusText.textContent = 'RAG: K·∫øt n·ªëi';
        
        // L∆∞u tr·∫°ng th√°i v√†o localStorage ƒë·ªÉ gi·∫£m s·ªë l·∫ßn ki·ªÉm tra
        localStorage.setItem('bibi-rag-status', 'connected');
        localStorage.setItem('bibi-rag-checked', Date.now().toString());
      } else {
        ragIndicator.classList.add('inactive');
        ragIndicator.classList.remove('active');
        ragStatusText.textContent = 'RAG: Kh√¥ng k·∫øt n·ªëi';
        
        // L∆∞u tr·∫°ng th√°i v√†o localStorage
        localStorage.setItem('bibi-rag-status', 'disconnected');
        localStorage.setItem('bibi-rag-checked', Date.now().toString());
      }
    } catch (error) {
      console.error('L·ªói ki·ªÉm tra RAG:', error);
      ragIndicator.classList.add('inactive');
      ragStatusText.textContent = 'RAG: L·ªói k·∫øt n·ªëi';
      
      // L∆∞u l·ªói v√†o localStorage
      localStorage.setItem('bibi-rag-status', 'error');
      localStorage.setItem('bibi-rag-error', error.message);
      localStorage.setItem('bibi-rag-checked', Date.now().toString());
    }
  }

  // Thi·∫øt l·∫≠p c√°c event listener
  initEventListeners() {
    // ƒê·ªãnh nghƒ©a c√°c x·ª≠ l√Ω cho t·ª´ng lo·∫°i n·ªôi dung - S·ª¨A ·ªû ƒê√ÇY ƒë·ªÉ gi·ªØ nguy√™n context c·ªßa "this"
    const self = this; // L∆∞u tham chi·∫øu ƒë·∫øn ƒë·ªëi t∆∞·ª£ng hi·ªán t·∫°i
    
    const actions = {
      explain: function() { self.handleGrammarRequest('explain', 'gi·∫£i th√≠ch chi ti·∫øt', 'üìù', 'Gi·∫£i th√≠ch v·ªÅ'); },
      examples: function() { self.handleGrammarRequest('examples', 't·∫°o v√≠ d·ª• minh h·ªça', 'üìã', 'V√≠ d·ª• v·ªÅ'); },
      exercises: function() { self.handleGrammarRequest('exercises', 't·∫°o b√†i t·∫≠p', '‚úèÔ∏è', 'B√†i t·∫≠p v·ªÅ'); },
      mistakes: function() { self.handleGrammarRequest('mistakes', 'ph√¢n t√≠ch l·ªói th∆∞·ªùng g·∫∑p', '‚ö†Ô∏è', 'L·ªói th∆∞·ªùng g·∫∑p v·ªÅ'); }
    };
    
    // Li√™n k·∫øt c√°c tab header v·ªõi c√°c h√†m x·ª≠ l√Ω t∆∞∆°ng ·ª©ng
    document.getElementById('explain-tab').addEventListener('click', actions.explain);
    document.getElementById('examples-tab').addEventListener('click', actions.examples);
    document.getElementById('exercises-tab').addEventListener('click', actions.exercises);
    document.getElementById('mistakes-tab').addEventListener('click', actions.mistakes);
    
    // Gi·ªØ n√∫t gi·∫£i th√≠ch ch√≠nh
    document.getElementById('explain-grammar-btn').addEventListener('click', actions.explain);
    
    // C√°c n√∫t ng√¥n ng·ªØ
    if (this.langViBtn) this.langViBtn.addEventListener('click', () => this.setLanguage('vi'));
    if (this.langEnBtn) this.langEnBtn.addEventListener('click', () => this.setLanguage('en'));
    if (this.langBothBtn) this.langBothBtn.addEventListener('click', () => this.setLanguage('both'));
    
    // X·ª≠ l√Ω input fields
    this.grammarTopic.addEventListener('change', () => {
      if (this.grammarTopic.value) {
        this.grammarQuery.value = '';
      }
    });
    
    this.grammarQuery.addEventListener('input', () => {
      if (this.grammarQuery.value.trim()) {
        this.grammarTopic.value = '';
      }
    });
    
    // X·ª≠ l√Ω chuy·ªÉn tab khi click
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        // L·∫•y lo·∫°i tab t·ª´ ID c·ªßa n√∫t (v√≠ d·ª•: "explain-tab" -> "explain")
        const tabType = btn.id.replace('-tab', '');
        
        // B·ªè active class kh·ªèi t·∫•t c·∫£ tabs
        tabButtons.forEach(tab => tab.classList.remove('active'));
        
        // Th√™m active class cho tab ƒëang click
        btn.classList.add('active');
        
        // B·ªè active class kh·ªèi t·∫•t c·∫£ n·ªôi dung tab
        tabContents.forEach(content => content.classList.remove('active'));
        
        // Th√™m active class cho n·ªôi dung tab t∆∞∆°ng ·ª©ng
        const activeContent = document.getElementById(`${tabType}-content`);
        if (activeContent) {
          activeContent.classList.add('active');
          
          // N·∫øu n·ªôi dung tab tr·ªëng, t·ª± ƒë·ªông k√≠ch ho·∫°t ch·ª©c nƒÉng t∆∞∆°ng ·ª©ng
          if (!activeContent.querySelector('.grammar-card') && this.grammarTopic.value) {
            // K√≠ch ho·∫°t ch·ª©c nƒÉng t∆∞∆°ng ·ª©ng
            switch(tabType) {
              case 'explain':
                this.handleGrammarRequest('explain', 'gi·∫£i th√≠ch chi ti·∫øt', 'üìù', 'Gi·∫£i th√≠ch v·ªÅ');
                break;
              case 'examples':
                this.handleGrammarRequest('examples', 't·∫°o v√≠ d·ª• minh h·ªça', 'üìã', 'V√≠ d·ª• v·ªÅ');
                break;
              case 'exercises':
                this.handleGrammarRequest('exercises', 't·∫°o b√†i t·∫≠p', '‚úèÔ∏è', 'B√†i t·∫≠p v·ªÅ');
                break;
              case 'mistakes':
                this.handleGrammarRequest('mistakes', 'ph√¢n t√≠ch l·ªói th∆∞·ªùng g·∫∑p', '‚ö†Ô∏è', 'L·ªói th∆∞·ªùng g·∫∑p v·ªÅ');
                break;
            }
          }
        }
      });
    });
  }

  // L·∫•y ch·ªß ƒë·ªÅ ng·ªØ ph√°p ƒë√£ ch·ªçn
  getSelectedGrammarTopic() {
    const topic = this.grammarTopic.value;
    const query = this.grammarQuery.value.trim();
    
    if (!topic && !query) {
      alert('Vui l√≤ng ch·ªçn ch·ªß ƒë·ªÅ ho·∫∑c nh·∫≠p c√¢u h·ªèi ng·ªØ ph√°p');
      return null;
    }
    
    return topic || query;
  }

  // Thi·∫øt l·∫≠p ng√¥n ng·ªØ hi·ªÉn th·ªã
  setLanguage(lang) {
    this.selectedLanguage = lang;
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i active
    this.langViBtn.classList.toggle('active', lang === 'vi');
    this.langEnBtn.classList.toggle('active', lang === 'en');
    this.langBothBtn.classList.toggle('active', lang === 'both');
    
    // N·∫øu ƒë√£ c√≥ k·∫øt qu·∫£, c·∫ßn g·ªçi l·∫°i API ƒë·ªÉ c·∫≠p nh·∫≠t ng√¥n ng·ªØ
    const outputArea = document.getElementById('grammar-output');
    if (outputArea.querySelector('.grammar-card')) {
      const lastAction = outputArea.querySelector('h3').dataset.action;
      if (lastAction) {
        const actions = {
          'explain': () => this.handleGrammarRequest('explain', 'gi·∫£i th√≠ch chi ti·∫øt', 'üìù', 'Gi·∫£i th√≠ch v·ªÅ'),
          'examples': () => this.handleGrammarRequest('examples', 't·∫°o v√≠ d·ª• minh h·ªça', 'üìã', 'V√≠ d·ª• v·ªÅ'),
          'exercises': () => this.handleGrammarRequest('exercises', 't·∫°o b√†i t·∫≠p', '‚úèÔ∏è', 'B√†i t·∫≠p v·ªÅ'),
          'mistakes': () => this.handleGrammarRequest('mistakes', 'ph√¢n t√≠ch l·ªói th∆∞·ªùng g·∫∑p', '‚ö†Ô∏è', 'L·ªói th∆∞·ªùng g·∫∑p v·ªÅ')
        };
        
        if (actions[lastAction]) {
          actions[lastAction]();
        }
      }
    }
  }

  // Thay th·∫ø h√†m handleGrammarRequest trong class GrammarController
  async handleGrammarRequest(promptType, actionVerb, iconEmoji, titlePrefix) {
    const selectedTopic = this.getSelectedGrammarTopic();
    if (!selectedTopic) return;
    
    // L∆∞u ch·ªß ƒë·ªÅ hi·ªán t·∫°i (TH√äM D√íNG N√ÄY)
    this.lastTopic = selectedTopic;
    
    // Reset chat khi chuy·ªÉn ch·ªß ƒë·ªÅ (TH√äM D√íNG N√ÄY)
    if (this.chat) this.chat.resetChat();
    
    // Th√™m th√¥ng tin tab v√†o query khi chuy·ªÉn tab
    let ragQuery = selectedTopic;
    if (promptType === 'examples') ragQuery = 'examples_tab ' + selectedTopic;
    if (promptType === 'exercises') ragQuery = 'exercises_tab ' + selectedTopic;
    if (promptType === 'mistakes') ragQuery = 'mistakes_tab ' + selectedTopic;
    
    // T·∫°o cache key
    const cacheKey = GrammarCache.getCacheKey(promptType, selectedTopic, this.selectedLanguage);
    
    // Ki·ªÉm tra cache
    const cachedContent = GrammarCache.getFromCache(cacheKey);
    if (cachedContent) {
        document.getElementById('grammar-output').innerHTML = cachedContent;
        return;
    }
    
    this.ui.showLoading();
    
    try {
        // Chu·∫©n b·ªã h∆∞·ªõng d·∫´n ng√¥n ng·ªØ
        let languageInstruction;
        switch(this.selectedLanguage) {
        case 'vi':
            languageInstruction = "Tr·∫£ l·ªùi ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát.";
            break;
        case 'en':
            languageInstruction = "Respond completely in English.";
            break;
        case 'both':
            languageInstruction = "Tr·∫£ l·ªùi song ng·ªØ: m·ªói ph·∫ßn c√≥ c·∫£ ti·∫øng Vi·ªát v√† ti·∫øng Anh (ti·∫øng Anh trong ngo·∫∑c).";
            break;
        }
        
        // Chu·∫©n b·ªã prompt
        const messages = [
        {
            role: "system",
            content: `${GRAMMAR_PROMPTS[promptType]}\n\n${languageInstruction}`
        },
        {
            role: "user",
            content: `H√£y ${actionVerb} v·ªÅ ch·ªß ƒë·ªÅ ng·ªØ ph√°p: "${selectedTopic}" cho h·ªçc sinh l·ªõp 6.`
        }
        ];
        
        // ·∫®n loading v√† kh·ªüi t·∫°o UI streaming
        this.ui.hideLoading();
        const title = `${iconEmoji} ${titlePrefix} ${selectedTopic}`;

        // X√°c ƒë·ªãnh container ƒë·∫ßu ra d·ª±a tr√™n lo·∫°i prompt
        let outputAreaId = 'grammar-output';
        if (promptType === 'examples') outputAreaId = 'examples-output';
        if (promptType === 'exercises') outputAreaId = 'exercises-output';
        if (promptType === 'mistakes') outputAreaId = 'mistakes-output';

        // Kh·ªüi t·∫°o UI streaming v·ªõi container ph√π h·ª£p
        const streamingContentElement = this.ui.initStreamingUI(title, promptType, outputAreaId);
        
        // G·ªçi API streaming - truy·ªÅn th√™m ragQuery cho RAG
        const response = await this.api.streamBiBiResponse(messages, 
          (chunk, fullContent, ragInfo) => {
              // C·∫≠p nh·∫≠t UI khi nh·∫≠n ƒë∆∞·ª£c t·ª´ng ph·∫ßn n·ªôi dung, th√™m truy·ªÅn ragInfo
              this.ui.updateStreamingContent(streamingContentElement, chunk, fullContent, ragInfo);
          }, {
              ragQuery: ragQuery, // Truy·ªÅn ragQuery v·ªõi preffix tab n·∫øu c√≥
              skipCache: window.bibiSkipCache || false // Th√™m t√πy ch·ªçn b·ªè qua cache
          });
        
        // T√°ch n·ªôi dung v√† th√¥ng tin RAG t·ª´ k·∫øt qu·∫£ tr·∫£ v·ªÅ
        const fullResponse = response.content;
        const ragInfo = response.ragInfo;
        
        // Ho√†n thi·ªán v√† l∆∞u cache - b√¢y gi·ªù truy·ªÅn th√™m ragInfo
        this.ui.finalizeStreamingContent(streamingContentElement, fullResponse, ragInfo);
        GrammarCache.saveToCache(cacheKey, document.getElementById('grammar-output').innerHTML);
        
    } catch (error) {
        console.error("L·ªói chi ti·∫øt:", error);
        this.ui.hideLoading();
        this.ui.showError(error);
    }
  }  
}